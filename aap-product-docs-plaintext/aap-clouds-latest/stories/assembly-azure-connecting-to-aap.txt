# Connecting to Red Hat Ansible Automation Platform

When network peering is complete and your Azure routing configuration is established, you can choose how your team accesses Ansible Automation Platform through your Azure network configuration.

# Access details

Regardless of whether Ansible Automation Platform was deployed with public or private access,
a set of DNS records is created.
The DNS records are created so that Ansible Automation Platform can be issued a valid TLS certificate for your deployment and to enable easy access to your applications.

To view a list of the URLs for the Ansible Automation Platform applications, navigate to the Parameters and Outputs page of the Azure Marketplace managed application listing for your deployment.

For more details about the Parameters and Outputs page, see
Accessing Red Hat Ansible Automation Platform on Microsoft Azure.

# Public Deployments

If you selected public access when you deployed Ansible Automation Platform on Microsoft Azure, you can access the Ansible Automation Platform application URLs over the public internet from a browser.

# Private deployments

If you selected private access when deploying Ansible Automation Platform on Microsoft Azure,
then the DNS record issued to the Red Hat Ansible Automation Platform on Microsoft Azure application points to a private address within the CIDR block selected when the managed application was deployed.
You must configure access to this address after you have created network peering.

The configuration and access method that you choose to connect to Ansible Automation Platform on Microsoft Azure depends on how your organization manages Azure infrastructure.
Your Azure administrators must determine the right model for your organization and configure the setup for you.

The following are the most common options:

* Azure hosted virtual machine
* VPN
* SSH tunnel

## Azure hosted virtual machine

A straightforward way to configure access for a small set of users to access private network resources on Azure networks is to create a jumpbox VM in a perimeter network (DMZ VNet) that users can remotely log into from the public internet.
The jumpbox VM requires workstation features such as a GUI and browser.

Users can remotely log into the publicly accessible virtual machine from on-premises machines through VNC, RDP, or other screen-sharing protocols.

To access the Ansible Automation Platform web UIs on the Azure private network, users navigate to the URLs using the browser on the jumpbox VM.

The DMZ VNet is connected to other Azure VNets through network peering, with routing rules established to send network traffic to the Ansible Automation Platform VNet.

The following diagram shows the topology for an example configuration of private network access via an Azure virtual machine.

![aap on azure private nw access vm]

* For more information about perimeter (DMZ) networks, refer to Perimeter Networks in the Microsoft Azure Cloud Adoption Framework documentation.
* For more information about jumpboxes, refer to
About Azure bastion host and jumpboxes
in the Microsoft Azure Cloud Adoption Framework documentation.

## VPN

If your organization requires that many users access Ansible Automation Platform over a private connection, or if your organization already uses VPNs or direct connections with Azure, then this approach might be suitable.

In this configuration, your on-premises infrastructure is connected to Azure through a Network Application Gateway and has routing rules that can enable access to Ansible Automation Platform to any connected computer on the local network.
The VNet connected to the Virtual Network Gateway is connected to other Azure VNets through network peering, with routing rules established to send network traffic to the Ansible Automation Platform VNet.

With this configuration, users can access Ansible Automation Platform through the application URLs as if they were using the public access approach.

![aap on azure private nw access vpn]

## SSH tunnel

When VPN is not an option and your local users are more technical, the SSH tunnel approach is a secure alternative that enables users to access Ansible Automation Platform from a browser on a local machine.

To implement this access model, create a lightweight Linux-based SSH server in a DMZ network, similar to the Azure Hosted Virtual Machine method.
The SSH server does not require any workstation features, because it simply acts as a proxy between a userâ€™s local machine and Ansible Automation Platform on Microsoft Azure.

Each user must be configured as an SSH user on the server.
Users can then establish an SSH tunnel from the local machine to the SSH server to route traffic for Ansible Automation Platform on Microsoft Azure.

This approach is easier to implement on Linux and macOS host machines, but can be accomplished on Windows.

1. Update your local hosts file so that the Ansible Automation Platform URLs route traffic to your local machine rather than the private IP that DNS records are configured with.
Add the following line to your hosts file:

```
127.0.0.1 controller.<your_AAPonAzure_instance>.az.ansiblecloud.com
```


The following example shows the line in a hosts file:

```
##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting. Do not change this entry.
#
127.0.0.1       localhost
255.255.255.255 broadcasthost
::1             localhost

127.0.0.1 controller.<your_AAPonAzure_instance>.az.ansiblecloud.com
```

2. As a user with root privileges, run the ssh command to establish an SSH tunnel.

In the example below, SSH_server_IP represents the IP address of the SSH server in your DMZ.

```
sudo ssh azureuser@<SSH_server_IP> -i ~/.ssh/id_ssh_key -N -f -L 443:controller.<your_AAPonAzure_instance>.az.ansiblecloud.com:443
```


The -L flag makes your local system route traffic for the automation controller URL over port 443 (HTTPs).

[NOTE]
----
You must use port 443 on both sides of the routing path. Using a different port on the local machine causes some Ansible Automation Platform features to not function properly.
----

When the SSH tunnel is established and your Azure routing is configured, you can access the automation controller URL from your local browser at https://controller.&lt;your_AAPonAzure_instance&gt;.az.ansiblecloud.com.

![aap on azure private nw access ssh]

# Accessing Red Hat Ansible Automation Platform on Microsoft Azure

When you initiate the deployment of the Red Hat Ansible Automation Platform managed app from Azure marketplace, a form is displayed in the Create Red Hat Ansible Automation Platform on Microsoft Azure window.
Complete the form to provision Ansible Automation Platform infrastructure and resources into your Azure tenant.

1. In a web browser, navigate to Managed Applications in the Azure console.
2. Select the instance of Red Hat Ansible Automation Platform on Microsoft Azure that you deployed.
3. Select Parameters and Outputs in the Settings section in the left navigation menu.
* The Parameters and Outputs page contains a link to the Ansible Automation Platform Landing page. The Ansible Automation Platform Landing page is available after deployment completes.
From the Ansible Automation Platform Landing page, you can access your automation controller and automation hub instance and view announcements and notifications.
You do not have to login to view the Ansible Automation Platform Landing page.
* The Parameters and Outputs page also displays direct links to the automation controller and automation hub.
4. Save the URL links for the Ansible Automation Platform Landing page, automation controller, and automation hub.
The names for the links are automationControllerUrl, automationHubUrl, and landingPageUrl.
5. Open the Ansible Automation Platform Landing page.

## Ansible Automation Platform Landing page

The Ansible Automation Platform Landing page is a convenient page for deployments of Ansible Automation Platform on Microsoft Azure.
You can open the following views from the navigation pane:

Overview:: Links to automation controller, automation hub, and Automation Analytics.
![Ansible Automation Platform Landing page overview]
Announcements:: You can view notifications about your subscription and global notifications about maintenance, upgrades, and resource downtime, for both public and private deployments of Ansible Automation Platform on Microsoft Azure.

To view announcements, click the  bell icon.
Automation Controller:: Displays links to the automation controller documentation.

To open the automation controller from this view, click Launch Automation Controller.
Automation Hub:: Displays links to the automation hub documentation.

To open the automation hub from this view, click Launch Automation Hub.
Automation Analytics:: Links to Automation Analytics documentation
Documentation:: Links to Red Hat Ansible Automation Platform on Microsoft Azure documentation.

## Logging in to automation controller

* In a browser, navigate to the automation controller URL, and then log in using the following credentials:
* Username: admin
* Password: Use the Administrator password you provided when you deployed the Ansible Automation Platform application.

The first time you login to Ansible Automation Platform on Microsoft Azure, you must configure a subscription and agree to the terms and conditions.

## License association

Red Hat provided a specific subscription entitlement manifest when you subscribed to Red Hat Ansible Automation Platform on Microsoft Azure.

When asked to submit information about your license, select your license manifest file that you obtained from access.redhat.com.

## Microsoft Entra ID SSO configuration

Follow the procedures below to configure SSO with Microsoft Entra ID. If your organization does not use Microsoft Entra ID for application authorization, you can create users in the user management system in Ansible Automation Platform.

1. In a browser, navigate to the Automation controller URL and log in using the following credentials:
* Username: admin
* Password: Use the Administrator password you provided when you deployed the Ansible Automation Platform application.
2. In the Automation controller console, click Settings in the menu options.
3. Click Miscellaneous System settings under the System settings.
4. Click Edit. Enter the Automation controller URL in the Base URl of the service field.
5. Click Save.

To set up enterprise authentication for Microsoft Entra ID, you must obtain an OAuth2 key and secret by registering your Ansible Automation Platform deployment in Azure.

To register the automation controller instance in Azure, you must supply the Azure AD OAuth2 Callback URL from the automation controller settings.

1. In a web browser, open the automation controller console.
2. Click Settings in the menu to open the main settings page.
3. Click Azure AD settings in the Authentication category to open the Details page.
4. Copy the value for Azure AD OAuth2 Callback URL. You will need this value when you register your deployed application in Microsoft Entra ID.

1. In a web browser, open the Azure portal.
2. Ensure that you are using the tenant where you deployed Ansible Automation Platform.
3. Type Microsoft Entra ID in the search bar.
4. Select Microsoft Entra ID from the search results.
5. Under Manage in the menu options, click App registrations.
6. In the App registrations page, click + New registration.
7. Configure the new registration as follows:
* In the Name field, enter the same name that you used for the deployed application.
* Select the default value for Supported account types.
* Select Web for Redirect URI (optional).
* In the Redirect URI (optional) field, enter the Azure AD OAuth2 Callback URL value that you fetched from automation controller.
8. Click Register to create the registration.

When registration is complete, the registration page for the Automation Controller application is displayed.

1. In the Automation controller application registration page on Azure, copy and save the value of Application (client) ID.

You will use this value for the Azure AD OAuth2 Key in the Ansible Automation Platform settings.
2. Under Manage, click Certificates & secrets.
3. Click Client secrets and then + New client secret.
4. Provide a description for the new secret.

It is not possible to automatically renew a certificate or identify when it is about to expire.

It is useful to include the date in the description, for example: AAP Client Secret <Today&#8217;s Date in YYYY-MM-DD format>.
5. Provide an expiration date for the new secret.

The maximum lifetime for the certificate is 2 years. Unless you have specific security needs that prevent the creation of a long term certificate, select an expiration date of 24 months.
6. Save the secret Value to a location on your local machine. Once you navigate away from this page it will be hidden and no longer retrievable.

Add the key (Application (client) ID) and value (Value) of the secret that you generated in Azure to your Ansible Automation Platform instance.

1. Open the automation controller console in a web browser.
2. Click menu:Settings[Azure AD settings].
3. Click Edit.
4. Enter the information for the secret that you generated in Microsoft Entra ID:
5. In Azure AD OAuth2 Key, paste the Application (client) ID.
6. In Azure AD OAuth2 Secret, paste the secret Value.
7. Click Save.

1. Open the automation controller in a web browser.
2. Under Resources, click Credentials.
3. Click Add to open the Create New Credentials page.
4. Enter a name for the new credential and select Azure Resource Manager for the credential type.
5. Use the Service Principal details to fill out the values of the form:
* Name: Choose a descriptive name for the credential, for example *Azure Infrastructure*.
* Subscription ID: Enter the subscription id where your resources created in Azure should be associated. This is unique to your tenant. Your organization may have multiple subscription ids; consult your Azure administrator regarding the subscription id that you should use.
* Client ID: Enter the appId value from the Service Principal creation.
* Client Secret: Enter the password from the Service Principal creation.
* Tenant ID: Enter the tenant from the Service Principal creation.
6. Click Save to save the credential.
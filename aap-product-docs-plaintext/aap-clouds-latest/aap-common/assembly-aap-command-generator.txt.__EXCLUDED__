# The command generator

The Command Generator is used to generate commands for launching operational playbooks provided by the Ansible-on-clouds operational playbook collection.
The process involves five steps:
1. Pull the ansible-on-clouds-ops container image.
2. List the available playbooks.
3. Use a command generator to generate a data file and the next command to run.
command_generator_vars and the command_generator are implemented using a docker container and are run using the docker command line interface.
4. Populate the data file and run the previous generated command.
This generates the final command with all parameters.

[NOTE]
----
When this step is complete, you can save the generated command and run the playbook when it is required.
----
5. Run the final command.
* Docker

# Pulling the ansible-on-clouds-ops container image

Pull the Docker image for the Ansible on Clouds operational container with the same tag version as your deployment. If you are unsure of the version you have deployed, see Command Generator and playbook gcp_get_aoc_version for more information on finding the currention of Ansible on Clouds deployment.


[NOTE]
----
Before Pulling the docker image, ensure you are logged in to registry.redhat.io using docker. Use the following command to login to registry.redhat.io.
$ docker login registry.redhat.io
For more information about registry login, see Registry Authentication
----

For example, if your foundation deployment version is 2.4.20240215-00, you must pull the operational image with tag 2.4.20240215.

Use the following commands:

$ export IMAGE=registry.redhat.io/ansible-on-clouds/ansible-on-clouds-ops-rhel9:2.4.20240215
$ docker pull $IMAGE --platform=linux/amd64


[NOTE]
----
If your foundation deployment version is not 2.4.20240215-00, refer to the tables on the Released versions page for a matching deployment version, in the column Ansible on Clouds version, and find the corresponding operational image to use, in the column Ansible-on-clouds-ops container image, for the IMAGE environment variable.
----

# Listing the available playbooks

1. For the list of available playbooks without details, use the following command.

$ docker run --rm $IMAGE command_generator_vars | grep Playbook

The current version of the operational playbooks collection contains the following playbooks:

Playbook: gcp_aap_health_check
Playbook: gcp_add_extension_nodes
Playbook: gcp_add_labels
Playbook: gcp_backup_delete
Playbook: gcp_backup_deployment
Playbook: gcp_backup_list
Playbook: gcp_backups_delete
Playbook: gcp_check_aoc_version
Playbook: gcp_deployment_inventory
Playbook: gcp_get_aoc_version
Playbook: gcp_health_check
Playbook: gcp_list_deployments
Playbook: gcp_nodes_health_check
Playbook: gcp_remove_extension_nodes
Playbook: gcp_remove_labels
Playbook: gcp_restore_deployment
Playbook: gcp_setup_logging_monitoring
Playbook: gcp_upgrade
2. To provide a list of all available playbooks, and to use the command generator, use the following command.

$ docker run --rm $IMAGE command_generator_vars

This provides a list of playbooks and a command similar to the following:

# Generating the data file

1. Run the command generator.

$ docker run --rm -v <local_directory_data_file>:/data $IMAGE command_generator_vars <playbook_name> --output-data-file /data/<data-file>.yml

The outputs of this command are the command to run and the data file template.
The data file is also saved in your <local_data_file_directory>.
This is the template which you populate with your data.

# Populating the data file

* Edit the data-file generated in Generating the data file.

Any attribute that represents a path must be an absolute path.
The command_generator automatically mounts a volume for it in the final command.

# Running the generated command

1. Ensure that the mounted volume points to the directory where the data file is.

This new command has the required parameters, environment variables and mounted volumes to run the playbook.
2. Run the generated command.
You can save this command to rerun it later if required.

# Using the playbooks

Some, but not all of the playbooks are described in this document.
Here, those which are used either to retrieve information from the Ansible on Clouds deployment or to check it are described. These playbooks do not modify the deployment.
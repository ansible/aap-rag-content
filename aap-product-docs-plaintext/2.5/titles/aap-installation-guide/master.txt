# RPM installation

Thank you for your interest in Red Hat Ansible Automation Platform. Ansible Automation Platform is a commercial offering that helps teams manage complex multi-tier deployments by adding control, knowledge, and delegation to Ansible-powered environments.
This guide helps you to understand the installation requirements and processes behind installing Ansible Automation Platform. This document has been updated to include information for the latest release of Ansible Automation Platform.

# Providing feedback on Red Hat documentation

If you have a suggestion to improve this documentation, or find an error, you can contact technical support at https://access.redhat.com to open a request.

# Red Hat Ansible Automation Platform installation overview

The Red Hat Ansible Automation Platform installation program offers you flexibility, allowing you to install Ansible Automation Platform by using several supported installation scenarios.

Regardless of the installation scenario you choose, installing Ansible Automation Platform involves the following steps:

Editing the Red Hat Ansible Automation Platform installer inventory file:: The Ansible Automation Platform installer inventory file allows you to specify your installation scenario and describe host deployments to Ansible. The examples provided in this document show the parameter specifications needed to install that scenario for your deployment.
Running the Red Hat Ansible Automation Platform installer setup script:: The setup script installs Ansible Automation Platform by using the required parameters defined in the inventory file.
Verifying your Ansible Automation Platform installation:: After installing Ansible Automation Platform, you can verify that the installation has been successful by logging in to the platform UI and seeing the relevant functionality.

1. For more information about the supported installation scenarios, see the Planning your installation.
2. For more information on available topologies, see Tested deployment models.

## Prerequisites

* You chose and obtained a platform installer from the Red Hat Ansible Automation Platform Product Software.
* You are installing on a machine that meets base system requirements.
* You have updated all of the packages to the recent version of your RHEL nodes.


[WARNING]
----
To prevent errors, upgrade your RHEL nodes fully before installing Ansible Automation Platform.
----

* You have created a Red Hat Registry Service Account, by using the instructions in Creating Registry Service Accounts.

For more information about obtaining a platform installer or system requirements, see the System requirements in the Planning your installation.

# System requirements

Use this information when planning your Red Hat Ansible Automation Platform installations and designing automation mesh topologies that fit your use case.

* You can obtain root access either through the sudo command, or through privilege escalation. For more on privilege escalation, see Understanding privilege escalation.
* You can de-escalate privileges from root to users such as: AWX, PostgreSQL, Event-Driven Ansible, or Pulp.
* You have configured an NTP client on all nodes.

## Red Hat Ansible Automation Platform system requirements

Your system must meet the following minimum system requirements to install and run Red Hat Ansible Automation Platform.
A resilient deployment requires 10 virtual machines with a minimum of 16 gigabytes(GB) of ram and 4 virtual cpus(vCPU).
See, Tested deployment models for more information on topology options.






[NOTE]
----
These are minimum requirements and can be increased for larger workloads in increments of 2x (for example 16GB becomes 32GB and 4 vCPU becomes 8vCPU). See the horizontal scaling guide for more information.
----

The following are necessary for you to work with project updates and collections:

* Ensure that the Network ports and protocols listed in Table 6.3. Automation Hub are available for successful connection and download of collections from automation hub or Ansible Galaxy server.

* If performing a bundled Ansible Automation Platform installation, the installation setup.sh script attempts to install ansible-core (and its dependencies) from the bundle for you.
* If you have installed Ansible-core manually, the Ansible Automation Platform installation setup.sh script detects that Ansible has been installed and does not attempt to reinstall it.


[NOTE]
----
You must use Ansible-core, which is installed via dnf.
Ansible-core version 2.16 is required for versions 2.5 and later.
----

## Platform gateway system requirements

The platform gateway is the service that handles authentication and authorization for Ansible Automation Platform. It provides a single entry into the platform and serves the platform&#8217;s user interface.

## Automation controller system requirements

Automation controller is a distributed system, where different software components can be co-located or deployed across multiple compute nodes.
In the installer, four node types are provided as abstractions to help you design the topology appropriate for your use case: control, hybrid, execution, and hop nodes.

Use the following recommendations for node sizing:

Execution nodes

Execution nodes run automation. Increase memory and CPU to increase capacity for running more forks.


[NOTE]
----
* The RAM and CPU resources stated are minimum recommendations to handle the job load for a node to run an average number of jobs simultaneously.
* Recommended RAM and CPU node sizes are not supplied.
The required RAM or CPU depends directly on the number of jobs you are running in that environment.
* For capacity based on forks in your configuration, see Automation controller capacity determination and job impact.
For further information about required RAM and CPU levels, see Performance tuning for automation controller.
----

Control nodes

Control nodes process events and run cluster jobs including project updates and cleanup jobs. Increasing CPU and memory can help with job event processing.

* 40GB minimum with at least 20GB available under /var/lib/awx
* Storage volume must be rated for a minimum baseline of 1500 IOPS
* Projects are stored on control and hybrid nodes, and for the duration of jobs, are also stored on execution nodes. If the cluster has many large projects, consider doubling the GB in /var/lib/awx/projects, to avoid disk space errors.

Hop nodes

Hop nodes serve to route traffic from one part of the automation mesh to another (for example, a hop node could be a bastion host into another network). RAM can affect throughput, CPU activity is low. Network bandwidth and latency are generally a more important factor than either RAM or CPU.

* Actual RAM requirements vary based on how many hosts automation controller manages simultaneously (which is controlled by the forks parameter in the job template or the system ansible.cfg file).
To avoid possible resource conflicts, Ansible recommends 1 GB of memory per 10 forks and 2 GB reservation for automation controller.
See Automation controller capacity determination and job impact.
If forks is set to 400, 42 GB of memory is recommended.
* Automation controller hosts check if umask is set to 0022. If not, the setup fails. Set umask=0022 to avoid this error.
* A larger number of hosts can be addressed, but if the fork number is less than the total host count, more passes across the hosts are required. You can avoid these RAM limitations by using any of the following approaches:
* Use rolling updates.
* Use the provisioning callback system built into automation controller, where each system requesting configuration enters a queue and is processed as quickly as possible.
* In cases where automation controller is producing or deploying images such as AMIs.

* For more information about obtaining an automation controller subscription, see Attaching your Red Hat Ansible Automation Platform subscription.
* For questions, contact Ansible support through the Red Hat Customer Portal.

## Automation hub system requirements

Automation hub allows you to discover and use new certified automation content from Red Hat Ansible and Certified Partners. On Ansible automation hub, you can discover and manage Ansible Collections, which are supported automation content developed by Red Hat and its partners for use cases such as cloud automation, network automation, and security automation.


[NOTE]
----
Private automation hub
If you install private automation hub from an internal address, and have a certificate which only encompasses the external address, this can result in an installation which cannot be used as container registry without certificate issues.
To avoid this, use the automationhub_main_url inventory variable with a value such as https://pah.example.com linking to the private automation hub node in the installation inventory file.
This adds the external address to /etc/pulp/settings.py.
This implies that you only want to use the external address.
For information about inventory file variables, see Inventory file variables.
----

### High availability automation hub requirements

Before deploying a high availability (HA) automation hub, ensure that you have a shared filesystem installed in your environment and that you have configured your network storage system, if applicable.

#### Required shared filesystem

A high availability automation hub requires you to have a shared file system, such as NFS, already installed in your environment. Before you run the Red Hat Ansible Automation Platform installer, verify that you installed the /var/lib/pulp directory across your cluster as part of the shared file system installation.
The Red Hat Ansible Automation Platform installer returns an error if /var/lib/pulp is not detected in one of your nodes, causing your high availability automation hub setup to fail.

If you receive an error stating /var/lib/pulp is not detected in one of your nodes, ensure /var/lib/pulp is properly mounted in all servers and re-run the installer.

#### Installing firewalld for HA hub deployment

If you intend to install a HA automation hub using a network storage on the automation hub nodes itself, you must first install and use firewalld to open the necessary ports as required by your shared storage system before running the Ansible Automation Platform installer.

Install and configure firewalld by executing the following commands:

1. Install the firewalld daemon:

```
$ dnf install firewalld
```

2. Add your network storage under <service> using the following command:

```
$ firewall-cmd --permanent --add-service=<service>
```


[NOTE]
----
For a list of supported services, use the $ firewall-cmd --get-services command
----
3. Reload to apply the configuration:

```
$ firewall-cmd --reload
```


## Event-Driven Ansible controller system requirements

The Event-Driven Ansible controller is a single-node system capable of handling a variable number of long-running processes (such as rulebook activations) on-demand, depending on the number of CPU cores.


[NOTE]
----
If you want to use Event-Driven Ansible 2.5 with a 2.4 automation controller version, see Using Event-Driven Ansible 2.5 with Ansible Automation Platform 2.4.
----

Use the following minimum requirements to run, by default, a maximum of 12 simultaneous activations:




[IMPORTANT]
----
* If you are running Red Hat Enterprise Linux 8 and want to set your memory limits, you must have cgroup v2 enabled before you install Event-Driven Ansible.
For specific instructions, see the Knowledge-Centered Support (KCS) article, Ansible Automation Platform Event-Driven Ansible controller for Red Hat Enterprise Linux 8 requires cgroupv2.
* When you activate an Event-Driven Ansible rulebook under standard conditions, it uses about 250 MB of memory.
However, the actual memory consumption can vary significantly based on the complexity of your rules and the volume and size of the events processed.
In scenarios where a large number of events are anticipated or the rulebook complexity is high, conduct a preliminary assessment of resource usage in a staging environment.
This ensures that your maximum number of activations is based on the capacity of your resources.
For an example of setting Event-Driven Ansible controller maximumrunning activations, see Single automation controller, single automation hub, and single Event-Driven Ansible controller node with external (installer managed) database.
----

## PostgreSQL requirements

Red Hat Ansible Automation Platform uses PostgreSQL 15. PostgreSQL user passwords are hashed with SCRAM-SHA-256 secure hashing algorithm before storing in the database.

To determine if your automation controller instance has access to the database, you can do so with the command, awx-manage check_db command.


[NOTE]
----
* Automation controller data is stored in the database.
Database storage increases with the number of hosts managed, number of jobs run, number of facts stored in the fact cache, and number of tasks in any individual job.
For example, a playbook runs every hour (24 times a day) across 250 hosts, with 20 tasks, stores over 800000 events in the database every week.
* If not enough space is reserved in the database, the old job runs and facts must be cleaned on a regular basis. For more information, see Management Jobs in the Configuring automation execution.
----

Optionally, you can configure the PostgreSQL database as separate nodes that are not managed by the Red Hat Ansible Automation Platform installer.
When the Ansible Automation Platform installer manages the database server, it configures the server with defaults that are generally recommended for most workloads.
For more information about the settings you can use to improve database performance, see Database Settings.

For more information about tuning your PostgreSQL server, see the PostgreSQL documentation.

### Setting up an external (customer supported) database


[IMPORTANT]
----
Red Hat does not support the use of external (customer supported) databases, however they are used by customers.
The following guidance on inital configuration, from a product installation perspective only, is provided to avoid related support requests.
----

Use the following procedure to configure an external PostgreSQL compliant database for use with an Ansible Automation Platform component, for example automation controller, Event-Driven Ansible, automation hub, and platform gateway.

1. Install and then connect to a PostgreSQL compliant database server with superuser privileges.

```
# psql -h <db.example.com> -U superuser -p 5432 -d postgres <Password for user superuser>:
```

2. Where the default value for <hostname> is hostname:

```
-h hostname
--host=hostname
```

3. Specify the hostname of the machine on which the server is running.
If the value begins with a slash, it is used as the directory for the UNIX-domain socket.

```
-d dbname
--dbname=dbname
```

4. Specify the name of the database to connect to.
This is equal to specifying dbname as the first non-option argument on the command line.
The dbname can be a connection string.
If so, connection string parameters override any conflicting command line options.

```
-U username
--username=username
```

5. Connect to the database as the user username instead of the default (you must have permission to do so).
6. Create the user, database, and password with the createDB or administrator role assigned to the user.
For further information, see Database Roles.
7. Add the database credentials and host details to the installation program's inventory file under the [all:vars] group.
Without mutual TLS (mTLS) authentication to the database

Use the following inventory file snippet to configure each component&#8217;s database without mTLS authentication. Uncomment the configuration you need.

```yaml
[all:vars]
# Automation controller database variables

# awx_install_pg_host=data.example.com
# awx_install_pg_port=<port_number>
# awx_install_pg_database=<database_name>
# awx_install_pg_username=<username>
# awx_install_pg_password=<password> # This is not required if you enable mTLS authentication to the database
# pg_sslmode=prefer # Set to verify-ca or verify-full to enable mTLS authentication to the database


# Event-Driven Ansible database variables

# automationedacontroller_install_pg_host=data.example.com
# automationedacontroller_install_pg_port=<port_number>
# automationedacontroller_install_pg_database=<database_name>
# automationedacontroller_install_pg_username=<username>
# automationedacontroller_install_pg_password=<password> # This is not required if you enable mTLS authentication to the database
# automationedacontroller_pg_sslmode=prefer # Set to verify-full to enable mTLS authentication to the database


# Automation hub database variables

# automationhub_pg_host=data.example.com
# automationhub_pg_port=<port_number>
# automationhub_pg_database=<database_name>
# automationhub_pg_username=<username>
# automationhub_pg_password=<password> # This is not required if you enable mTLS authentication to the database
# automationhub_pg_sslmode=prefer # Set to verify-ca or verify-full to enable mTLS authentication to the database


# Platform gateway database variables

# automationgateway_install_pg_host=data.example.com
# automationgateway_install_pg_port=<port_number>
# automationgateway_install_pg_database=<database_name>
# automationgateway_install_pg_username=<username>
# automationgateway_install_pg_password=<password> # This is not required if you enable mTLS authentication to the database
# automationgateway_pg_sslmode=prefer # Set to verify-ca or verify-full to enable mTLS authentication to the database
```

With mTLS authentication to the database

Use the following inventory file snippet to configure each component&#8217;s database with mTLS authentication. Uncomment the configuration you need.

```yaml
[all:vars]
# Automation controller database variables

# awx_install_pg_host=data.example.com
# awx_install_pg_port=<port_number>
# awx_install_pg_database=<database_name>
# awx_install_pg_username=<username>
# pg_sslmode=verify-full # This can be either verify-ca or verify-full
# pgclient_sslcert=/path/to/cert # Path to the certificate file
# pgclient_sslkey=/path/to/key # Path to the key file


# Event-Driven Ansible database variables

# automationedacontroller_install_pg_host=data.example.com
# automationedacontroller_install_pg_port=<port_number>
# automationedacontroller_install_pg_database=<database_name>
# automationedacontroller_install_pg_username=<username>
# automationedacontroller_pg_sslmode=verify-full # EDA does not support verify-ca
# automationedacontroller_pgclient_sslcert=/path/to/cert # Path to the certificate file
# automationedacontroller_pgclient_sslkey=/path/to/key # Path to the key file


# Automation hub database variables

# automationhub_pg_host=data.example.com
# automationhub_pg_port=<port_number>
# automationhub_pg_database=<database_name>
# automationhub_pg_username=<username>
# automationhub_pg_sslmode=verify-full # This can be either verify-ca or verify-full
# automationhub_pgclient_sslcert=/path/to/cert # Path to the certificate file
# automationhub_pgclient_sslkey=/path/to/key # Path to the key file


# Platform gateway database variables

# automationgateway_install_pg_host=data.example.com
# automationgateway_install_pg_port=<port_number>
# automationgateway_install_pg_database=<database_name>
# automationgateway_install_pg_username=<username>
# automationgateway_pg_sslmode=verify-full # This can be either verify-ca or verify-full
# automationgateway_pgclient_sslcert=/path/to/cert # Path to the certificate file
# automationgateway_pgclient_sslkey=/path/to/key # Path to the key file
```

8. Run the installer.
If you are using a PostgreSQL database, the database is owned by the connecting user and must have a createDB or administrator role assigned to it.
9. Check that you can connect to the created database with the credentials provided in the inventory file.
10. Check the permission of the user. The user should have the createDB or administrator role.


[NOTE]
----
During this procedure, you must check the External Database coverage. For further information, see https://access.redhat.com/articles/4010491
----

### Enabling the hstore extension for the automation hub PostgreSQL database

Added in Ansible Automation Platform 2.5, the database migration script uses hstore fields to store information, therefore the hstore extension to the automation hub PostgreSQL database must be enabled.

This process is automatic when using the Ansible Automation Platform installer and a managed PostgreSQL server.

If the PostgreSQL database is external, you must enable the hstore extension to the automation hub PostreSQL database manually before automation hub installation.

If the hstore extension is not enabled before automation hub installation, a failure is raised during database migration.

1. Check if the extension is available on the PostgreSQL server (automation hub database).

```
$ psql -d <automation hub database> -c "SELECT * FROM pg_available_extensions WHERE name='hstore'"
```

2. Where the default value for <automation hub database> is automationhub.

Example output with hstore available:

```
name  | default_version | installed_version |comment
------+-----------------+-------------------+---------------------------------------------------
 hstore | 1.7           |                   | data type for storing sets of (key, value) pairs
(1 row)
```


Example output with hstore not available:

```
 name | default_version | installed_version | comment
------+-----------------+-------------------+---------
(0 rows)
```

3. On a RHEL based server, the hstore extension is included in the postgresql-contrib RPM package, which is not installed automatically when installing the PostgreSQL server RPM package.

To install the RPM package, use the following command:

```
dnf install postgresql-contrib
```

4. Create the hstore PostgreSQL extension on the automation hub database with the following command:

```
$ psql -d <automation hub database> -c "CREATE EXTENSION hstore;"
```


The output of which is:

```
CREATE EXTENSION
```


In the following output, the installed_version field contains the hstore extension used, indicating that hstore is enabled.

```
name | default_version | installed_version | comment
-----+-----------------+-------------------+------------------------------------------------------
hstore  |     1.7      |       1.7         | data type for storing sets of (key, value) pairs
(1 row)
```


### Benchmarking storage performance for the Ansible Automation Platform PostgreSQL database

Check whether the minimum Ansible Automation Platform PostgreSQL database requirements are met by using the Flexible I/O Tester (FIO) tool. FIO is a tool used to benchmark read and write IOPS performance of the storage system.

* You have installed the Flexible I/O Tester (fio) storage performance benchmarking tool.

To install fio, run the following command as the root user:

# yum -y install fio
* You have adequate disk space to store the fio test data log files.

The examples shown in the procedure require at least 60GB disk space in the /tmp directory:
* numjobs sets the number of jobs run by the command.
* size=10G sets the file size generated by each job.
* You have adjusted the value of the size parameter. Adjusting this value reduces the amount of test data.

1. Run a random write test:

$ fio --name=write_iops --directory=/tmp --numjobs=3 --size=10G \
--time_based --runtime=60s --ramp_time=2s --ioengine=libaio --direct=1 \
--verify=0 --bs=4K --iodepth=64 --rw=randwrite \
--group_reporting=1 > /tmp/fio_benchmark_write_iops.log \
2>> /tmp/fio_write_iops_error.log
2. Run a random read test:

$ fio --name=read_iops --directory=/tmp \
--numjobs=3 --size=10G --time_based --runtime=60s --ramp_time=2s \
--ioengine=libaio --direct=1 --verify=0 --bs=4K --iodepth=64 --rw=randread \
--group_reporting=1 > /tmp/fio_benchmark_read_iops.log \
2>> /tmp/fio_read_iops_error.log
3. Review the results:

In the log files written by the benchmark commands, search for the line beginning with iops.
This line shows the minimum, maximum, and average values for the test.

The following example shows the line in the log file for the random read test:

$ cat /tmp/fio_benchmark_read_iops.log
read_iops: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=libaio, iodepth=64
[…]
   iops        : min=50879, max=61603, avg=56221.33, stdev=679.97, samples=360
[…]

[NOTE]
----
The above is a baseline to help evaluate the best case performance on your systems. Systems can and will change and performance may vary depending on what else is happening on your systems, storage or network at the time of testing. You must review, monitor, and revisit the log files according to your own business requirements, application workloads, and new demands.
----

# Installing Red Hat Ansible Automation Platform

Ansible Automation Platform is a modular platform. The platform gateway deploys automation platform components, such as automation controller, automation hub, and Event-Driven Ansible controller.

For more information about the components provided with Ansible Automation Platform, see Red Hat Ansible Automation Platform components in Planning your installation.

There are several supported installation scenarios for Red Hat Ansible Automation Platform. To install Red Hat Ansible Automation Platform, you must edit the inventory file parameters to specify your installation scenario. You can use the enterprise installer as a basis for your own inventory file.

For a comprehensive list of pre-defined variables used in Ansible installation inventory files, see Ansible variables.

## Editing the Red Hat Ansible Automation Platform installer inventory file

You can use the Red Hat Ansible Automation Platform installer inventory file to specify your installation scenario.

1. Navigate to the installer:
1. [RPM installed package]

```
$ cd /opt/ansible-automation-platform/installer/
```

2. [bundled installer]

```
$ cd ansible-automation-platform-setup-bundle-<latest-version>
```

3. [online installer]

```
$ cd ansible-automation-platform-setup-<latest-version>
```

2. Open the inventory file with a text editor.
3. Edit inventory file parameters to specify your installation scenario.
You can use one of the supported Installation scenario examples as the basis for your inventory file.

* For a comprehensive list of pre-defined variables used in Ansible installation inventory files, see Inventory file variables.

## Inventory file examples based on installation scenarios

Red Hat supports several installation scenarios for Ansible Automation Platform. You can develop your own inventory files using the example files as a basis, or you can use the example closest to your preferred installation scenario.

### Inventory file recommendations based on installation scenarios

Before selecting your installation method for Ansible Automation Platform, review the following recommendations. Familiarity with these recommendations will streamline the installation process.

* Provide a reachable IP address or fully qualified domain name (FQDN) for hosts to ensure users can sync and install content from automation hub from a different node.

The FQDN must not contain either the - or the _ symbols, as it will not be processed correctly.

Do not use localhost.
* admin is the default user ID for the initial log in to Ansible Automation Platform and cannot be changed in the inventory file.
* Use of special characters for pg_password is limited. The !, #, 0 and @ characters are supported. Use of other special characters can cause the setup to fail.
* Enter your Red Hat Registry Service Account credentials in registry_username and registry_password to link to the Red Hat container registry.
* The inventory file variables registry_username and registry_password are only required if a non-bundle installer is used.

#### Single platform gateway and automation controller with an external (installer managed) database

Use this example to see what is minimally needed within the inventory file to deploy single instances of platform gateway and automation controller with an external (installer managed) database.


```
[automationcontroller]
controller.example.com

[automationgateway]
gateway.example.com

[database]
data.example.com

[all:vars]
admin_password='<password>'
pg_host='data.example.com'
pg_port=5432
pg_database='awx'
pg_username='awx'
pg_password='<password>'
pg_sslmode='prefer' # set to 'verify-full' for client-side enforced SSL

registry_url='registry.redhat.io'
registry_username='<registry username>'
registry_password='<registry password>'

# Automation Gateway configuration
automationgateway_admin_password=''

automationgateway_pg_host='data.example.com'
automationgateway_pg_port=5432

automationgateway_pg_database='automationgateway'
automationgateway_pg_username='automationgateway'
automationgateway_pg_password=''
automationgateway_pg_sslmode='prefer'

# The main automation gateway URL that clients will connect to (e.g. https://<load balancer host>).
# If not specified, the first node in the [automationgateway] group will be used when needed.
# automationgateway_main_url = ''

# Certificate and key to install in Automation Gateway
# automationgateway_ssl_cert=/path/to/automationgateway.cert
# automationgateway_ssl_key=/path/to/automationgateway.key

# SSL-related variables
# If set, this will install a custom CA certificate to the system trust store.
# custom_ca_cert=/path/to/ca.crt
# Certificate and key to install in nginx for the web UI and API
# web_server_ssl_cert=/path/to/tower.cert
# web_server_ssl_key=/path/to/tower.key
# Server-side SSL settings for PostgreSQL (when we are installing it).
# postgres_use_ssl=False
# postgres_ssl_cert=/path/to/pgsql.crt
# postgres_ssl_key=/path/to/pgsql.key
```


#### Single platform gateway, automation controller, and automation hub with an external (installer managed) database

Use this example to populate the inventory file to deploy single instances of platform gateway, automation controller, and automation hub with an external (installer managed) database.


```
[automationcontroller]
controller.example.com

[automationhub]
automationhub.example.com

[automationgateway]
gateway.example.com

[database]
data.example.com

[all:vars]
admin_password='<password>'
pg_host='data.example.com'
pg_port='5432'
pg_database='awx'
pg_username='awx'
pg_password='<password>'
pg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL

registry_url='registry.redhat.io'
registry_username='<registry username>'
registry_password='<registry password>'

automationhub_admin_password= <PASSWORD>

automationhub_pg_host='data.example.com'
automationhub_pg_port=5432

automationhub_pg_database='automationhub'
automationhub_pg_username='automationhub'
automationhub_pg_password=<PASSWORD>
automationhub_pg_sslmode='prefer'

# The default install will deploy a TLS enabled Automation Hub.
# If for some reason this is not the behavior wanted one can
# disable TLS enabled deployment.
#
# automationhub_disable_https = False
# The default install will generate self-signed certificates for the Automation
# Hub service. If you are providing valid certificate via automationhub_ssl_cert
# and automationhub_ssl_key, one should toggle that value to True.
#
# automationhub_ssl_validate_certs = False
# SSL-related variables
# If set, this will install a custom CA certificate to the system trust store.
# custom_ca_cert=/path/to/ca.crt
# Certificate and key to install in Automation Hub node
# automationhub_ssl_cert=/path/to/automationhub.cert
# automationhub_ssl_key=/path/to/automationhub.key

# Automation Gateway configuration
automationgateway_admin_password=''

automationgateway_pg_host=''
automationgateway_pg_port=5432

automationgateway_pg_database='automationgateway'
automationgateway_pg_username='automationgateway'
automationgateway_pg_password=''
automationgateway_pg_sslmode='prefer'

# The main automation gateway URL that clients will connect to (e.g. https://<load balancer host>).
# If not specified, the first node in the [automationgateway] group will be used when needed.
# automationgateway_main_url = ''

# Certificate and key to install in Automation Gateway
# automationgateway_ssl_cert=/path/to/automationgateway.cert
# automationgateway_ssl_key=/path/to/automationgateway.key

# Certificate and key to install in nginx for the web UI and API
# web_server_ssl_cert=/path/to/tower.cert
# web_server_ssl_key=/path/to/tower.key
# Server-side SSL settings for PostgreSQL (when we are installing it).
# postgres_use_ssl=False
# postgres_ssl_cert=/path/to/pgsql.crt
# postgres_ssl_key=/path/to/pgsql.key
```


#### Single platform gateway, automation controller, automation hub, and Event-Driven Ansible controller with an external (installer managed) database

Use this example to populate the inventory file to deploy single instances of platform gateway, automation controller, automation hub, and Event-Driven Ansible controller with an external (installer managed) database.


[IMPORTANT]
----
* This scenario requires a minimum of automation controller 2.4 for successful deployment of Event-Driven Ansible controller.
* Event-Driven Ansible controller must be installed on a separate server and cannot be installed on the same host as automation hub and automation controller.
* When an Event-Driven Ansible rulebook is activated under standard conditions, it uses approximately 250 MB of memory. However, the actual memory consumption can vary significantly based on the complexity of the rules and the volume and size of the events processed.
In scenarios where a large number of events are anticipated or the rulebook complexity is high, conduct a preliminary assessment of resource usage in a staging environment.
This ensures that the maximum number of activations is based on the resource capacity.
In the following example, the default automationedacontroller_max_running_activations setting is 12, but can be  adjusted according to fit capacity.
----

[automationcontroller]
controller.example.com

[automationhub]
automationhub.example.com

[automationedacontroller]
automationedacontroller.example.com

[automationgateway]
gateway.example.com

[database]
data.example.com

[all:vars]
admin_password='<password>'
pg_host='data.example.com'
pg_port='5432'
pg_database='awx'
pg_username='awx'
pg_password='<password>'
pg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL

registry_url='registry.redhat.io'
registry_username='<registry username>'
registry_password='<registry password>'

# Automation hub configuration

automationhub_admin_password= <PASSWORD>

automationhub_pg_host='data.example.com'
automationhub_pg_port=5432

automationhub_pg_database='automationhub'
automationhub_pg_username='automationhub'
automationhub_pg_password=<PASSWORD>
automationhub_pg_sslmode='prefer'

# Automation Event-Driven Ansible controller configuration

automationedacontroller_admin_password='<eda-password>'

automationedacontroller_pg_host='data.example.com'
automationedacontroller_pg_port=5432

automationedacontroller_pg_database='automationedacontroller'
automationedacontroller_pg_username='automationedacontroller'
automationedacontroller_pg_password='<password>'

# Keystore file to install in SSO node
# sso_custom_keystore_file='/path/to/sso.jks'

# This install will deploy SSO with sso_use_https=True
# Keystore password is required for https enabled SSO
sso_keystore_password=''

# This install will deploy a TLS enabled Automation Hub.
# If for some reason this is not the behavior wanted one can
# disable TLS enabled deployment.
#
# automationhub_disable_https = False
# The default install will generate self-signed certificates for the Automation
# Hub service. If you are providing valid certificate via automationhub_ssl_cert
# and automationhub_ssl_key, one should toggle that value to True.
#
# automationhub_ssl_validate_certs = False
# SSL-related variables
# If set, this will install a custom CA certificate to the system trust store.
# custom_ca_cert=/path/to/ca.crt
# Certificate and key to install in Automation Hub node
# automationhub_ssl_cert=/path/to/automationhub.cert
# automationhub_ssl_key=/path/to/automationhub.key

# Automation Gateway configuration
automationgateway_admin_password=''

automationgateway_pg_host=''
automationgateway_pg_port=5432

automationgateway_pg_database='automationgateway'
automationgateway_pg_username='automationgateway'
automationgateway_pg_password=''
automationgateway_pg_sslmode='prefer'

# The main automation gateway URL that clients will connect to (e.g. https://<load balancer host>).
# If not specified, the first node in the [automationgateway] group will be used when needed.
# automationgateway_main_url = ''

# Certificate and key to install in Automation Gateway
# automationgateway_ssl_cert=/path/to/automationgateway.cert
# automationgateway_ssl_key=/path/to/automationgateway.key

# Certificate and key to install in nginx for the web UI and API
# web_server_ssl_cert=/path/to/tower.cert
# web_server_ssl_key=/path/to/tower.key
# Server-side SSL settings for PostgreSQL (when we are installing it).
# postgres_use_ssl=False
# postgres_ssl_cert=/path/to/pgsql.crt
# postgres_ssl_key=/path/to/pgsql.key

# Boolean flag used to verify Automation Controller's
# web certificates when making calls from Automation Event-Driven Ansible controller.
# automationedacontroller_controller_verify_ssl = true
#
# Certificate and key to install in Automation Event-Driven Ansible controller node
# automationedacontroller_ssl_cert=/path/to/automationeda.crt
# automationedacontroller_ssl_key=/path/to/automationeda.key

For more information about these inventory variables, refer to the Ansible automation hub variables.

#### High availability automation hub

Use the following examples to populate the inventory file to install a highly available automation hub. This inventory file includes a highly available automation hub with a clustered setup.

You can configure your HA deployment further to enable a high availability deployment of automation hub on SELinux.

* Specify the IP address for your database host, using the automation_pg_host and automation_pg_port inventory variables. For example:


```
automationhub_pg_host='192.0.2.10'
automationhub_pg_port=5432
```


* Also specify the IP address for your database host in the [database] section, using the value in the automationhub_pg_host inventory variable:


```
[database]
192.0.2.10
```


* If installing a clustered setup, replace localhost ansible_connection=local in the [automationhub] section with the hostname or IP of all instances. For example:


```
[automationhub]
automationhub1.testing.ansible.com ansible_user=cloud-user
automationhub2.testing.ansible.com ansible_user=cloud-user
automationhub3.testing.ansible.com ansible_user=cloud-user
```


Check that the following directives are present in /etc/pulp/settings.py in each of the private automation hub servers:


```
USE_X_FORWARDED_PORT = True
USE_X_FORWARDED_HOST = True
```



[NOTE]
----
If automationhub_main_url is not specified, the first node in the [automationhub] group will be used as default.
----

#### Enabling a high availability (HA) deployment of automation hub on SELinux

You can configure the inventory file to enable high availability deployment of automation hub on SELinux. You must create two mount points for /var/lib/pulp and /var/lib/pulp/pulpcore_static, and then assign the appropriate SELinux contexts to each.


[NOTE]
----
You must add the context for /var/lib/pulp pulpcore_static and run the Ansible Automation Platform installer before adding the context for /var/lib/pulp.
----

* You have already configured a NFS export on your server.

[NOTE]
----
The NFS share is hosted on an external server and is not a part of high availability automation hub deployment.
----

1. Create a mount point at /var/lib/pulp:

```
$ mkdir /var/lib/pulp/
```

2. Open /etc/fstab using a text editor, then add the following values:

```
srv_rhel8:/data /var/lib/pulp nfs defaults,_netdev,nosharecache,context="system_u:object_r:var_lib_t:s0" 0 0
srv_rhel8:/data/pulpcore_static /var/lib/pulp/pulpcore_static nfs defaults,_netdev,nosharecache,context="system_u:object_r:httpd_sys_content_rw_t:s0" 0 0
```

3. Run the reload systemd manager configuration command:

```
$ systemctl daemon-reload
```

4. Run the mount command for /var/lib/pulp:

```
$ mount /var/lib/pulp
```

5. Create a mount point at /var/lib/pulp/pulpcore_static:

```
$ mkdir /var/lib/pulp/pulpcore_static
```

6. Run the mount command:

```
$ mount -a
```

7. With the mount points set up, run the Ansible Automation Platform installer:

```
$ setup.sh -- -b --become-user root
```

8. After the installation is complete, unmount the /var/lib/pulp/ mount point.

1. Apply the appropriate SELinux context.
2. Configure the pulpcore.serivce.

* See the SELinux Requirements on the Pulp Project documentation for a list of SELinux contexts.
* See the Filesystem Layout for a full description of Pulp folders.

##### Configuring pulpcore.service

After you have configured the inventory file, and applied the SELinux context, you now need to configure the pulp service.

1. With the two mount points set up, shut down the Pulp service to configure pulpcore.service:

```
$ systemctl stop pulpcore.service
```

2. Edit pulpcore.service using systemctl:

```
$ systemctl edit pulpcore.service
```

3. Add the following entry to pulpcore.service to ensure that automation hub services starts only after starting the network and mounting the remote mount points:

```
[Unit]
After=network.target var-lib-pulp.mount
```

4. Enable remote-fs.target:

```
$ systemctl enable remote-fs.target
```

5. Reboot the system:

```
$ systemctl reboot
```


A bug in the pulpcore SELinux policies can cause the token authentication public/private keys in etc/pulp/certs/ to not have the proper SELinux labels, causing the pulp process to fail. When this occurs, run the following command to temporarily attach the proper labels:


```
$ chcon system_u:object_r:pulpcore_etc_t:s0 /etc/pulp/certs/token_{private,public}_key.pem
```


Repeat this command to reattach the proper SELinux labels whenever you relabel your system.

##### Applying the SELinux context

After you have configured the inventory file, you must now apply the context to enable the high availability (HA) deployment of automation hub on SELinux.

1. Shut down the Pulp service:

```
$ systemctl stop pulpcore.service
```

2. Unmount /var/lib/pulp/pulpcore_static:

```
$ umount /var/lib/pulp/pulpcore_static
```

3. Unmount /var/lib/pulp/:

```
$ umount /var/lib/pulp/
```

4. Open /etc/fstab using a text editor, then replace the existing value for /var/lib/pulp with the following:

```
srv_rhel8:/data /var/lib/pulp nfs defaults,_netdev,nosharecache,context="system_u:object_r:pulpcore_var_lib_t:s0" 0 0
```

5. Run the mount command:

```
$ mount -a
```


#### Configuring content signing on private automation hub

To successfully sign and publish Ansible Certified Content Collections, you must configure private automation hub for signing.

* Your GnuPG key pairs have been securely set up and managed by your organization.
* Your public-private key pair has proper access for configuring content signing on private automation hub.

1. Create a signing script that accepts only a filename.

[NOTE]
----
This script acts as the signing service and must generate an ascii-armored detached gpg signature for that file using the key specified through the PULP_SIGNING_KEY_FINGERPRINT environment variable.
----

The script prints out a JSON structure with the following format.

```
{"file": "filename", "signature": "filename.asc"}
```


All the file names are relative paths inside the current working directory.
The file name must remain the same for the detached signature.
Example:

The following script produces signatures for content:

```shell
#!/usr/bin/env bash

FILE_PATH=$1
SIGNATURE_PATH="$1.asc"

ADMIN_ID="$PULP_SIGNING_KEY_FINGERPRINT"
PASSWORD="password"

# Create a detached signature
gpg --quiet --batch --pinentry-mode loopback --yes --passphrase \
   $PASSWORD --homedir ~/.gnupg/ --detach-sign --default-key $ADMIN_ID \
   --armor --output $SIGNATURE_PATH $FILE_PATH

# Check the exit status
STATUS=$?
if [ $STATUS -eq 0 ]; then
   echo {\"file\": \"$FILE_PATH\", \"signature\": \"$SIGNATURE_PATH\"}
else
   exit $STATUS
fi
```


After you deploy a private automation hub with signing enabled to your Ansible Automation Platform cluster, new UI additions are displayed in collections.
2. Review the Ansible Automation Platform installer inventory file for options that begin with automationhub_*.

```
[all:vars]
.
.
.
automationhub_create_default_collection_signing_service = True
automationhub_auto_sign_collections = True
automationhub_require_content_approval = True
automationhub_collection_signing_service_key = /abs/path/to/galaxy_signing_service.gpg
automationhub_collection_signing_service_script = /abs/path/to/collection_signing.sh
```


The two new keys (automationhub_auto_sign_collections and automationhub_require_content_approval) indicate that the collections must be signed and approved after they are uploaded to private automation hub.

#### Adding a safe plugin variable to Event-Driven Ansible controller

When using redhat.insights_eda or similar plugins to run rulebook activations in Event-Driven Ansible controller, you must add a safe plugin variable to a directory in Ansible Automation Platform. This ensures connection between Event-Driven Ansible controller and the source plugin, and displays port mappings correctly.

1. Create a directory for the safe plugin variable: mkdir -p ./group_vars/automationedacontroller
2. Create a file within that directory for your new setting (for example, touch ./group_vars/automationedacontroller/custom.yml)
3. Add the variable automationedacontroller_additional_settings to extend the default settings.yaml template for Event-Driven Ansible controller and add the SAFE_PLUGINS field with a list of plugins to enable. For example:

```
automationedacontroller_additional_settings:
   SAFE_PLUGINS:
     - ansible.eda.webhook
     - ansible.eda.alertmanager
```


[NOTE]
----
You can also extend the automationedacontroller_additional_settings variable beyond SAFE_PLUGINS in the Django configuration file, /etc/ansible-automation-platform/eda/settings.yaml
----

### Setting registry_username and registry_password

If you intend to use the registry_username and registry_password variables in an inventory file you are recommended to use the following method to create a Registry Service Account to set a token with an expiration in the plaintext inventory/vars.yml file instead of using a plaintext username and password, for reasons of security.

Registry service accounts provide named tokens that can be used in environments where credentials are shared, such as deployment systems.

1. Navigate to https://access.redhat.com/terms-based-registry/accounts
2. On the Registry Service Accounts page click New Service Account.
3. Enter a name for the account using only the accepted characters.
4. Optionally enter a description for the account.
5. Click Create account.
6. Find the created account in the list.
The list of accounts is long so you might have to click Next multiple times before finding the account you created.
Alternatively, if you know the name of your token, you can go directly to the page by entering the URL https://access.redhat.com/terms-based-registry/token/<name-of-your-token>
7. Click the name of the account that you created.
8. A token page opens, displaying a generated Username (different to the account name) and a token.

If no Username and token are displayed, click Regenerate token. You can also click this to generate a new Username and token.
9. Copy the service account name and use it to set registry_username.
10. Copy the token and use it to set registry_password.

#### Configuring Redis

Ansible Automation Platform offers a centralized Redis instance in both standalone and clustered topologies.

In RPM deployments, the Redis mode is set to cluster by default. You can change this setting in the inventory file [all:vars] section as in the following example:


```
[all:vars]
admin_password='<password>'
pg_host='data.example.com'
pg_port='5432'
pg_database='awx'
pg_username='awx'
pg_password='<password>'
pg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL

registry_url='registry.redhat.io'
registry_username='<registry username>'
registry_password='<registry password>'

redis_mode=cluster
```


For more information about Redis, see Caching and queueing system in Planning your installation.

## Running the Red Hat Ansible Automation Platform installer setup script

After you update the inventory file with required parameters, run the installer setup script.

* Run the setup.sh script

```
$ sudo ./setup.sh
```



[NOTE]
----
If you are running the setup as a non-root user with sudo privileges, you can use the following command:

```
$ ANSIBLE_BECOME_METHOD='sudo'
ANSIBLE_BECOME=True ./setup.sh
```

----

Installation of Red Hat Ansible Automation Platform will begin.

See Understanding privilege escalation for additional setup.sh script examples.

## Verifying installation of Ansible Automation Platform

Upon a successful login, your installation of Red Hat Ansible Automation Platform is complete.


[IMPORTANT]
----
If the installation fails and you are a customer who has purchased a valid license for Red Hat Ansible Automation Platform, contact Ansible through the Red Hat Customer portal.
----

See Getting started with Ansible Automation Platform for post installation instructions.

## Adding a subscription manifest to Ansible Automation Platform

Before you first log in, you must add your subscription information to the platform. To add a subscription to Ansible Automation Platform, see Obtaining a manifest file in the Access management and authentication.

# Horizontal Scaling in Red Hat Ansible Automation Platform

You can set up multi-node deployments for components across Ansible Automation Platform. Whether you require horizontal scaling for Automation Execution, Automation Decisions, or automation mesh, you can scale your deployments based on your organization’s needs.

## Horizontal scaling in Event-Driven Ansible controller

With Event-Driven Ansible controller, you can set up horizontal scaling for your events automation. This multi-node deployment enables you to define as many nodes as you prefer during the installation process. You can also increase or decrease the number of nodes at any time according to your organizational needs.

The following node types are used in this deployment:

API node type:: Responds to the HTTP REST API of Event-Driven Ansible controller.
Worker node type:: Runs an Event-Driven Ansible worker, which is the component of Event-Driven Ansible that not only manages projects and activations, but also executes the activations themselves.
Hybrid node type:: Is a combination of the API node and the worker node.

The following example shows how you can set up an inventory file for horizontal scaling of Event-Driven Ansible controller on Red Hat Enterprise Linux VMs using the host group name [automationedacontroller] and the node type variable eda_node_type:


```
[automationedacontroller]

3.88.116.111
routable_hostname=automationedacontroller-api.example.com eda_node_type=api

# worker node
3.88.116.112 routable_hostname=automationedacontroller-api.example.com eda_node_type=worker
```


### Sizing and scaling guidelines

API nodes process user requests (interactions with the UI or API) while worker nodes process the activations and other background tasks required for Event-Driven Ansible to function properly. The number of API nodes you require correlates to the desired number of users of the application and the number of worker nodes correlates to the desired number of activations you want to run.

Since activations are variable and controlled by worker nodes, the supported approach for scaling is to use separate API and worker nodes instead of hybrid nodes due to the efficient allocation of hardware resources by worker nodes. By separating the nodes, you can scale each type independently based on specific needs, leading to better resource utilization and cost efficiency.

An example of an instance in which you might consider scaling up your node deployment is when you want to deploy Event-Driven Ansible for a small group of users who will run a large number of activations. In this case, one API node is adequate, but if you require more, you can scale up to three additional worker nodes.

To set up a multi-node deployment, follow the procedure in Setting up horizontal scaling for Event-Driven Ansible controller.

### Setting up horizontal scaling for Event-Driven Ansible controller

To scale up (add more nodes) or scale down (remove nodes), you must update the content of the inventory to add or remove nodes and rerun the installer.

1. Update the inventory to add two more worker nodes:

```
[automationedacontroller]

3.88.116.111 routable_hostname=automationedacontroller-api.example.com eda_node_type=api

3.88.116.112 routable_hostname=automationedacontroller-api.example.com eda_node_type=worker

# two more worker nodes
3.88.116.113 routable_hostname=automationedacontroller-api.example.com eda_node_type=worker

3.88.116.114 routable_hostname=automationedacontroller-api.example.com eda_node_type=worker
```

2. Re-run the installer.

# Disconnected installation

If you are not connected to the internet or do not have access to online repositories, you can install Red Hat Ansible Automation Platform without an active internet connection.

## Prerequisites

Before installing Ansible Automation Platform on a disconnected network, you must meet the following prerequisites:

* A subscription manifest that you can upload to the platform.

For more information, see Obtaining a manifest file.
* The Ansible Automation Platform setup bundle at Customer Portal is downloaded.
* The DNS records for the automation controller and private automation hub servers are created.

## Ansible Automation Platform installation on disconnected RHEL

You can install Ansible Automation Platform without an internet connection by using the installer-managed database located on the automation controller. The setup bundle is recommended for disconnected installation because it includes additional components that make installing Ansible Automation Platform easier in a disconnected environment. These include the Ansible Automation Platform Red Hat package managers (RPMs) and the default execution environment (EE) images.

For a comprehensive list of pre-defined variables used in Ansible installation inventory files, see Ansible variables.

### System requirements for disconnected installation

Ensure that your system has all the hardware requirements before performing a disconnected installation of Ansible Automation Platform. You can find these in system requirements.

### RPM Source

RPM dependencies for Ansible Automation Platform that come from the BaseOS and AppStream repositories are not included in the setup bundle. To add these dependencies, you must first obtain access to BaseOS and AppStream repositories. Use Satellite to sync repositories and add dependencies. If you prefer an alternative tool, you can choose between the following options:

* Reposync
* The RHEL Binary DVD


[NOTE]
----
The RHEL Binary DVD method requires the DVD for supported versions of RHEL. See Red Hat Enterprise Linux Life Cycle for information on which versions of RHEL are currently supported.
----

* Satellite

## Synchronizing RPM repositories using reposync

To perform a reposync you need a RHEL host that has access to the internet. After the repositories are synced, you can move the repositories to the disconnected network hosted from a web server.

When downloading RPM, ensure you use the applicable distro.

1. Attach the BaseOS and AppStream required repositories:

```
# subscription-manager repos \
    --enable rhel-9-for-x86_64-baseos-rpms \
    --enable rhel-9-for-x86_64-appstream-rpms
```

2. Perform the reposync:

```
# dnf install yum-utils
# reposync -m --download-metadata --gpgcheck \
    -p /path/to/download
```

1. Use reposync with --download-metadata and without --newest-only. See RHEL 8 Reposync.
* If you are not using --newest-only, the repos downloaded may take an extended amount of time to sync due to the large number of GB.
* If you are using --newest-only, the repos downloaded may take an extended amount of time to sync due to the large number of GB.

After the reposync is completed, your repositories are ready to use with a web server.
3. Move the repositories to your disconnected network.

## Creating a new web server to host repositories

If you do not have an existing web server to host your repositories, you can create one with your synced repositories.

1. Install prerequisites:

```
$ sudo dnf install httpd
```

2. Configure httpd to serve the repo directory:

```
/etc/httpd/conf.d/repository.conf

DocumentRoot '/path/to/repos'

<LocationMatch "^/+$">
    Options -Indexes
    ErrorDocument 403 /.noindex.html
</LocationMatch>

<Directory '/path/to/repos'>
    Options All Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>
```

3. Ensure that the directory is readable by an apache user:

```
$ sudo chown -R apache /path/to/repos
```

4. Configure SELinux:

```
$ sudo semanage fcontext -a -t httpd_sys_content_t "/path/to/repos(/.*)?"
$ sudo restorecon -ir /path/to/repos
```

5. Enable httpd:

```
$ sudo systemctl enable --now httpd.service
```

6. Open firewall:

```
$ sudo firewall-cmd --zone=public --add-service=http –add-service=https --permanent
$ sudo firewall-cmd --reload
```

7. On automation services, add a repo file at /etc/yum.repos.d/local.repo, and add the optional repos if needed:

```
[Local-BaseOS]
name=Local BaseOS
baseurl=http://<webserver_fqdn>/rhel-8-for-x86_64-baseos-rpms
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release

[Local-AppStream]
name=Local AppStream
baseurl=http://<webserver_fqdn>/rhel-8-for-x86_64-appstream-rpms
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
```


## Accessing RPM repositories from a locally mounted DVD

If you plan to access the repositories from the RHEL binary DVD, you must first set up a local repository.

1. Mount DVD or ISO:
1. DVD

```
# mkdir /media/rheldvd && mount /dev/sr0 /media/rheldvd
```

2. ISO

```
# mkdir /media/rheldvd && mount -o loop rhrhel-8.6-x86_64-dvd.iso /media/rheldvd
```

2. Create yum repo file at /etc/yum.repos.d/dvd.repo

```
[dvd-BaseOS]
name=DVD for RHEL - BaseOS
baseurl=file:///media/rheldvd/BaseOS
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release

[dvd-AppStream]
name=DVD for RHEL - AppStream
baseurl=file:///media/rheldvd/AppStream
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
```

3. Import the gpg key:

```
# rpm --import /media/rheldvd/RPM-GPG-KEY-redhat-release
```



[NOTE]
----
If the key is not imported you will see an error similar to

```
# Curl error (6): Couldn't resolve host name for
https://www.redhat.com/security/data/fd431d51.txt [Could not resolve host:
www.redhat.com]
```

----

For further detail on setting up a repository see Need to set up yum repository for locally-mounted DVD on Red Hat Enterprise Linux 8.

## Downloading and installing the Ansible Automation Platform setup bundle

Choose the setup bundle to download Ansible Automation Platform for disconnected installations. This bundle includes the RPM content for Ansible Automation Platform and the default execution environment images that will be uploaded to your private automation hub during the installation process.

1. Download the Ansible Automation Platform setup bundle package by navigating to the Red Hat Ansible Automation Platform download page and clicking Download Now for the Ansible Automation Platform 2.5 Setup Bundle.
2. On control node, untar the bundle:

```
$ tar xvf \
   ansible-automation-platform-setup-bundle-2.5-1.tar.gz
$ cd ansible-automation-platform-setup-bundle-2.5-1
```

3. Edit the inventory file to include variables based on your host names and desired password values.


[NOTE]
----
See section 3.2 Inventory file examples base on installation scenarios for a list of examples that best fits your scenario.
----

## Completing post installation tasks

After you have completed the installation of Ansible Automation Platform, ensure that automation hub and automation controller deploy properly.

Before your first login, you must add your subscription information to the platform. To obtain your subscription information in uploadable form, see Obtaining a manifest file in Access management and authentication.

Once you have obtained your subscription manifest, see Getting started with Ansible Automation Platform for instructions on how to upload your subscription information.

Now that you have successfully installed Ansible Automation Platform, to begin using its features, see the following guides for your next steps:

Getting started with Ansible Automation Platform.

Managing automation content.

Creating and using execution environments.

# Inventory file variables

The following tables contain information about the variables used in Ansible Automation Platform&#8217;s installation inventory files. The tables include the variables that you can use for RPM-based installation and container-based installation.

## General variables



## Automation hub variables



## Automation controller variables



## Event-Driven Ansible controller variables



## Platform gateway variables



## Database variables



## Image variables



## Receptor variables



## Ansible variables

The following variables control how Ansible Automation Platform interacts with remote hosts.

For more information about variables specific to certain plugins, see the documentation for Ansible.Builtin.

For a list of global configuration options, see Ansible Configuration Settings.


# Setting up an external (customer supported) database


[IMPORTANT]
----
* Red Hat does not support the use of external (customer supported) databases, however they are used by customers. The following guidance on initial configuration, from a product installation perspective only, is provided to avoid related support requests.
* When using an external database with the Ansible Automation Platform, you must create and maintain that database. Ensure that you clear your external database when uninstalling the Ansible Automation Platform.
----

Use the following procedure to configure an external PostgreSQL compliant database for use with an Ansible Automation Platform component, for example automation controller, Event-Driven Ansible, automation hub, and platform gateway.

1. Install and then connect to a PostgreSQL compliant database server with superuser privileges.

```
# psql -h <db.example.com> -U superuser -p 5432 -d postgres <Password for user superuser>:
```

2. Where the default value for <hostname> is hostname:

```
-h hostname
--host=hostname
```

3. Specify the hostname of the machine on which the server is running.
If the value begins with a slash, it is used as the directory for the UNIX-domain socket.

```
-d dbname
--dbname=dbname
```

4. Specify the name of the database to connect to.
This is equal to specifying dbname as the first non-option argument on the command line.
The dbname can be a connection string.
If so, connection string parameters override any conflicting command line options.

```
-U username
--username=username
```

5. Connect to the database as the user username instead of the default (you must have permission to do so).
6. Create the user, database, and password with the createDB or administrator role assigned to the user.
For further information, see Database Roles.
7. Add the database credentials and host details to the installation program's inventory file under the [all:vars] group.
Without mutual TLS (mTLS) authentication to the database

Use the following inventory file snippet to configure each component&#8217;s database without mTLS authentication. Uncomment the configuration you need.

```yaml
[all:vars]
# Automation controller database variables

# awx_install_pg_host=data.example.com
# awx_install_pg_port=<port_number>
# awx_install_pg_database=<database_name>
# awx_install_pg_username=<username>
# awx_install_pg_password=<password> # This is not required if you enable mTLS authentication to the database
# pg_sslmode=prefer # Set to verify-ca or verify-full to enable mTLS authentication to the database


# Event-Driven Ansible database variables

# automationedacontroller_install_pg_host=data.example.com
# automationedacontroller_install_pg_port=<port_number>
# automationedacontroller_install_pg_database=<database_name>
# automationedacontroller_install_pg_username=<username>
# automationedacontroller_install_pg_password=<password> # This is not required if you enable mTLS authentication to the database
# automationedacontroller_pg_sslmode=prefer # Set to verify-full to enable mTLS authentication to the database


# Automation hub database variables

# automationhub_pg_host=data.example.com
# automationhub_pg_port=<port_number>
# automationhub_pg_database=<database_name>
# automationhub_pg_username=<username>
# automationhub_pg_password=<password> # This is not required if you enable mTLS authentication to the database
# automationhub_pg_sslmode=prefer # Set to verify-ca or verify-full to enable mTLS authentication to the database


# Platform gateway database variables

# automationgateway_install_pg_host=data.example.com
# automationgateway_install_pg_port=<port_number>
# automationgateway_install_pg_database=<database_name>
# automationgateway_install_pg_username=<username>
# automationgateway_install_pg_password=<password> # This is not required if you enable mTLS authentication to the database
# automationgateway_pg_sslmode=prefer # Set to verify-ca or verify-full to enable mTLS authentication to the database
```

With mTLS authentication to the database

Use the following inventory file snippet to configure each component&#8217;s database with mTLS authentication. Uncomment the configuration you need.

```yaml
[all:vars]
# Automation controller database variables

# awx_install_pg_host=data.example.com
# awx_install_pg_port=<port_number>
# awx_install_pg_database=<database_name>
# awx_install_pg_username=<username>
# pg_sslmode=verify-full # This can be either verify-ca or verify-full
# pgclient_sslcert=/path/to/cert # Path to the certificate file
# pgclient_sslkey=/path/to/key # Path to the key file


# Event-Driven Ansible database variables

# automationedacontroller_install_pg_host=data.example.com
# automationedacontroller_install_pg_port=<port_number>
# automationedacontroller_install_pg_database=<database_name>
# automationedacontroller_install_pg_username=<username>
# automationedacontroller_pg_sslmode=verify-full # EDA does not support verify-ca
# automationedacontroller_pgclient_sslcert=/path/to/cert # Path to the certificate file
# automationedacontroller_pgclient_sslkey=/path/to/key # Path to the key file


# Automation hub database variables

# automationhub_pg_host=data.example.com
# automationhub_pg_port=<port_number>
# automationhub_pg_database=<database_name>
# automationhub_pg_username=<username>
# automationhub_pg_sslmode=verify-full # This can be either verify-ca or verify-full
# automationhub_pgclient_sslcert=/path/to/cert # Path to the certificate file
# automationhub_pgclient_sslkey=/path/to/key # Path to the key file


# Platform gateway database variables

# automationgateway_install_pg_host=data.example.com
# automationgateway_install_pg_port=<port_number>
# automationgateway_install_pg_database=<database_name>
# automationgateway_install_pg_username=<username>
# automationgateway_pg_sslmode=verify-full # This can be either verify-ca or verify-full
# automationgateway_pgclient_sslcert=/path/to/cert # Path to the certificate file
# automationgateway_pgclient_sslkey=/path/to/key # Path to the key file
```

8. Run the installer.
If you are using a PostgreSQL database, the database is owned by the connecting user and must have a createDB or administrator role assigned to it.
9. Check that you can connect to the created database with the credentials provided in the inventory file.
10. Check the permission of the user. The user should have the createDB or administrator role.


[NOTE]
----
During this procedure, you must check the External Database coverage. For further information, see https://access.redhat.com/articles/4010491
----
# OAuth 2 token authentication

OAuth (Open Authorization) is an open standard for token-based authentication and authorization.
OAuth 2 authentication is commonly used when interacting with the automation controller API programmatically.
Similar to Basic authentication, you are given an OAuth 2 token with each API request through the Authorization header.
Unlike Basic authentication, OAuth 2 tokens have a configurable timeout and are scopable.
Tokens have a configurable expiration time and can be easily revoked for one user or for the entire automation controller system by an administrator if needed.
You can do this with the revoke_oauth2_tokens management command, or by using the API as explained in Revoke an access token.

The different methods for obtaining OAuth2 access tokens in automation controller include the following:

* Personal access tokens (PAT)
* Application token: Password grant type
* Application token: Implicit grant type
* Application token: Authorization Code grant type

A user needs to create an OAuth 2 token in the API or in the menu:Access Management[OAuth Applications] tab of the platform gateway UI.
For more information about creating tokens through the UI, see Adding tokens.

For the purpose of this example, use the PAT method for creating a token in the API.
After you create it, you can set the scope.


[NOTE]
----
You can configure the expiration time of the token system-wide.
For more information, see Configuring access to external applications with token-based authentication.
----

Token authentication is best used for any programmatic use of the automation controller API, such as Python scripts or tools such as curl.

curl -u user:password -k -X POST https://<controller-host>/api/v2/tokens/

This call returns JSON data with the following:

![API OAuth2 JSON]

You can use the value of the token property to perform a GET request for an automation controller resource, such as Hosts:

curl -k -X POST \
  -H “Content-Type: application/json”
  -H “Authorization: Bearer <oauth2-token-value>” \
  https://<controller-host>/api/v2/hosts/

You can also run a job by making a POST to the job template that you want to start:

curl -k -X POST \
  -H "Authorization: Bearer <oauth2-token-value>" \
  -H "Content-Type: application/json" \
  --data '{"limit" : "ansible"}' \
  https://<controller-host>/api/v2/job_templates/14/launch/

awxkit is an open source tool that makes it easy to use HTTP requests to access the automation controller API.
You can have awxkit get a PAT on your behalf by using the awxkit login command.
For more information, see AWX Command Line Interface.

If you need to write custom requests, you can write a Python script by using Python library requests, such as the following example:

import requests
oauth2_token_value = 'y1Q8ye4hPvT61aQq63Da6N1C25jiA'   # your token value from controller
url = 'https://<controller-host>/api/v2/users/'
payload = {}
headers = {'Authorization': 'Bearer ' + oauth2_token_value,}

# makes request to controller user endpoint
response = requests.request('GET', url, headers=headers, data=payload,
allow_redirects=False, verify=False)

# prints json returned from controller with formatting
print(json.dumps(response.json(), indent=4, sort_keys=True))

For more information about obtaining OAuth2 access tokens and how to use OAuth 2 in the context of external applications, see Configuring access to external applications with token-based authentication.

## Enabling external users to create OAuth 2 tokens

By default, external users such as those created by single sign-on are not able to generate OAuth tokens for security purposes.

1. From the navigation panel, select menu:Settings[Platform gateway].
2. Select btn:[Edit platform gateway settings].
3. Enable the option to Allow external users to create OAuth2 tokens.
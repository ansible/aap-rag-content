# Installing Ansible development tools on a container inside VS Code

The Dev Containers VS Code extension requires a .devcontainer file to store settings for your dev containers.
You must create a config file for your dev container and reopen your directory in a container in VS Code.

* You have installed a containerization platform, for example Podman, Podman Desktop, Docker, or Docker Desktop.
* You have a Red Hat login and you have logged in to the Red Hat registry at registry.redhat.io.
For information about logging in to registry.redhat.io, see
Authenticating with the Red Hat container registry.
* You have installed VS Code.
* You have installed the Ansible extension in VS Code.
* You have installed the Microsoft Dev Containers extension in VS Code.
* If you are installing Ansible development tools on Windows, launch VS Code and connect to the WSL machine:
1. Click the Remote () icon.
2. In the dropdown menu that appears, select the option to connect to the WSL machine.

1. In VS Code, open the directory where you want to store the configuration files for your development container.
2. Create a subdirectory called .devcontainer.
3. In the .devcontainer directory, create a file called devcontainer.json.

You must use different settings depending on whether you are using Podman or Docker.
* If you are using Podman or Podman desktop, add the following text to devcontainer.json:

```
{
  "name": "ansible-dev-container-podman",
  "image": "registry.redhat.io/ansible-automation-platform-25/ansible-dev-tools-rhel8:latest",
  "containerUser": "root",
  "runArgs": [
    "--cap-add=CAP_MKNOD",
    "--cap-add=NET_ADMIN",
    "--cap-add=SYS_ADMIN",
    "--cap-add=SYS_RESOURCE",
    "--device",
    "/dev/fuse",
    "--security-opt",
    "seccomp=unconfined",
    "--security-opt",
    "label=disable",
    "--security-opt",
    "apparmor=unconfined",
    "--security-opt",
    "unmask=/sys/fs/cgroup",
    "--userns=host",
    "--hostname=ansible-dev-container"
  ],
  "customizations": {
    "vscode": {
      "extensions": ["redhat.ansible"]
    }
  }
}
```

* If you are using Docker or Docker desktop, add the following text to devcontainer.json:

```
{
  "name": "ansible-dev-container-docker",
  "image": "registry.redhat.io/ansible-automation-platform-25/ansible-dev-tools-rhel8:latest",
  "containerUser": "root",
  "runArgs": [
    "--privileged",
    "--device",
    "/dev/fuse",
    "--hostname=ansible-dev-container"
  ],
  "updateRemoteUserUID": true,
  "customizations": {
    "vscode": {
      "extensions": ["redhat.ansible"]
    }
  }
}
```

4. Reopen the directory in a container.
* If VS Code detects that your directory contains the devcontainer.json file, the following notification appears:
![Reopen in container]

Click Reopen in Container.
* If the notification does not appear, click the Remote () icon. In the dropdown menu that appears, select Reopen in Container.

The Remote () status in the VS Code Status bar displays opening Remote and a notification indicates the progress in opening the container.

When the directory reopens in a container, the Remote () status displays Dev Container: ansible-dev-container.


[NOTE]
----
The base image for the container is a Universal Base Image Minimal (UBI Minimal) image that uses microdnf as a package manager.
The dnf and yum package managers are not available in the container.
For information about using microdnf in containers based on UBI Minimal images, see
Adding software in a minimal UBI container
in the Red Hat Enterprise Linux Building, running, and managing containers guide.
----
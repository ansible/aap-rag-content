# Mapping

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or what groups they belong to, you can configure authenticator maps.
Authenticator maps allow you to add conditions that must be met before a user is given or denied access to a resource type. Authenticator maps are associated with an authenticator and are given an order. The maps are processed in order when the user logs in. These can be thought of like firewall rules or mail filters.

# Authenticator map types

Ansible Automation Platform supports the following rule types:

Allow:: Determine if the user is allowed to log into the system.
Organization:: Determine if a user should be put into an organization.
Team:: Determine if the user should be a member of a team.
Role:: Determine if the user is a member of a role (for example, System Auditor).
Is Superuser:: Determine if the user is a superuser in the system.

These authentication map types can be used with any type of authenticator.

# Authenticator map triggers

Each map has a trigger that defines when the map should be evaluated as true. Trigger types include the following:

Always:: The trigger should always be fired.
Never:: The trigger should never be fired.
Group:: The map is true or false  based on a user having, not having or having multiple groups in the source system. When defining a group trigger, the authentication mapping expands to include the following selections:
* Operation: This field includes conditional settings that trigger the handling of the rule based on the specified Groups criteria. The choices include and and or. For example, if you select and the user logging in must be a member of all of the groups specified in the Groups field for this trigger to be true. Alternatively, if you select or the user logging in must be a member of any of the specified Groups in order for the trigger to fire.

[NOTE]
----
If you are only keying off one group it doesn’t matter if you select "and" or "or".
----
* Groups: This is a list of one or more groups coming from the authentication system that the user must be a member of. See the Operation field to determine the behavior of the trigger if more than one group is specified in the trigger.

[NOTE]
----
Group identifiers are case-sensitive and must match the authenticator backend. For example, cn=johnsmith,dc=example,dc=com instead of CN=johnsmith,DC=example,DC=com.
----
Attribute:: The map is true or false based on a users attributes coming from the source system. When defining an attribute trigger, the authentication mapping expands to include the following selections:
* Operation: This field includes conditional settings that trigger the handling of the rule based on the specified Attribute criteria. In version 2.5 this field indicates what will happen if the source system returns a list of  attributes instead of a single value. For example, if the source system returns multiple emails for a user and Operation was set to and, all of the given emails must match the Comparison for the trigger to be True. If Operation was set to or, any of the returned emails will set the trigger to True if they match the Comparison in the trigger.

[NOTE]
----
If you would like to experiment with multiple attribute maps you can do that through the API but the UI form will remove multi-attribute maps if the authenticator is saved through the UI. When adding multiple attributes to a map, the Operation will also apply to the attributes.
----
* Attribute: The name of the attribute coming from the source system this trigger will be evaluated against. For example, if you wanted the trigger to fire based on the user's last name and the last name field in the source system was called users_last_name you would enter the value ‘users_last_name’ in this field.
* Comparison: Tells the trigger how to evaluate the value of the users. Attribute in the source system compared to the Value specified on the trigger. Available options are: contains, matches, ends with, in, or equals. Below is a breakdown of each Comparison type:
* contains: The specified character sequence in Value is contained within the attributes value returned from the source. For example, given an attribute value of ‘John’ from the source the contains Comparison would set the trigger to True if the trigger Value was set to ‘Jo’ and False if the trigger Value was ‘Joy’.
* matches: The Value on the trigger is treated as a python regular expression and does an Regular expression match (re.match) (with case ignore on) between the specified Value and the value returned from the source system. For example, if the trigger's Value was ‘Jo’ the trigger would return True if the value from the source was ‘John‘ or ‘Joanne‘ or any other value which matched the regular expression ‘Jo’. The trigger would return False if the sources value for the attribute was ‘Dan’ because ‘Dan’ does not match the regular expression ‘Jo’.
* ends with: The trigger will see if the value provided by the source ends with the specified Value of the trigger. For example, if the source provided a value of ‘John’ the trigger would be True if its Value was set to ‘n’ or ‘on’. The trigger would be False if its Value was set to ‘z’ because the value ‘John’ coming from the source does not end with the value ’z’ specified by the trigger.
* equal: The trigger will see if the value provided by the source is equal to (in its entirety) the specified Value of the trigger. For example, if the source returned the value ‘John’, the trigger would be True if its Value was set to ‘John’. Any value other than ‘John’ returned from the source would set this trigger to False.
* in: The in condition will see if the value matches one of several values. When in is specified as the Comparison, the Value field can be a comma separated list. For example, if a trigger had a Value of ‘John,Donna’ the trigger would be True if the attribute coming from the source had either the value ‘John’ or ‘Donna’. Otherwise, the trigger would be False.
* Value: The value that a users attribute will be matched against based on the Comparison field. See examples in the Comparison definition in this section.

[NOTE]
----
If the Comparison type is in, this field can be a comma separated list (without spaces).
----

# Authenticator map examples

* Make this user a superuser if they have an attribute called aap_superuser with a value of True.
* Add this user to a team if they have the group cn=Administrators,ou=AAP,ou=example,o=com or cn=Operators,ou=AAP,ou=example,o=com.
* Never allow access to the system if the user has an attribute called disabled with a value of True, Yes or Until Further Notice.

Since maps are executed in order, it is possible to create exceptions. Expanding on the previous example for “Never allow access to the system if the user has an attribute called disabled with a value of True, Yes or Until Further Notice.

You can add another rule with a higher order, such as, “Allow access to the system for a disabled user if they are in the group Emergency Contacts.”

The first rule prevents the disabled user from accessing the system, but the second rule alters that decision to grant access to the system for the disabled user if they are in the Emergency Contacts group.

# Allow mapping

With allow mapping, you can control which users have access to the system by defining the conditions that must be met.

1. After configuring the authentication details for your authentication method, select Allow from the Add authentication mapping list.
2. Enter a unique rule Name to identify the rule.
3. Select a Trigger from the list. See Authenticator map triggers for more information about map triggers.
4. Select Revoke to deny user access to the system when none of the trigger conditions are matched.
5. Click btn:[Next].

1. You can manage the authentication mappings order by dragging and dropping the mapping up or down in the list.

[NOTE]
----
The mapping precedence is determined by the order in which the mappings are listed.
----
2. Click btn:[Next] to review and verify the mapping configurations.
3. Click btn:[Finish].

# Organization mapping

You can control which users are placed into which Ansible Automation Platform organizations based on attributes like their username and email address or based on groups provided from an authenticator.

When organization mapping is positively evaluated, a specified organization is created, if it does not exist if the authenticator tied to the map is allowed to create objects.

1. After configuring the authentication details for your authentication type, select Organization from the Add authentication mapping list.
2. Enter a unique rule Name to identify the rule.
3. Select a Trigger from the list. See Authenticator map triggers for more information about map triggers.
4. Select Revoke to deny user access to the system when none of the trigger conditions are matched.
5. Select the Organization to which matching users are added or blocked.
6. Select a Role to be applied or removed for matching users (for example, Organization Admin or Organization Member).
7. Click btn:[Next].

1. You can manage the authentication mappings order by dragging and dropping the mapping up or down in the list.

[NOTE]
----
The mapping precedence is determined by the order in which the mappings are listed.
----
2. Click btn:[Next] to review and verify the mapping configurations.
3. Click btn:[Finish].

# Team mapping

Team mapping is the mapping of team members (users) from authenticators.

You can define the options for each team’s membership. For each team, you can specify which users are automatically added as members of the team and also which users can administer the team.

Team mappings can be specified separately for each account authentication.

When Team mapping is positively evaluated, a specified team and its organization are created, if they don’t exist if the related authenticator is allowed to create objects.

1. After configuring the authentication details for your authentication type, select Team from the Add authentication mapping list.
2. Enter a unique rule Name to identify the rule.
3. Select a Trigger from the list. See Authenticator map triggers for more information about map triggers.
4. Select Revoke to deny user access to the system when none of the trigger conditions are matched.
5. Select the Team and Organization to which matching users are added or blocked.
6. Select a Role to be applied or removed for matching users (for example, Team Admin or Team Member).
7. Click btn:[Next].

1. You can manage the authentication mappings order by dragging and dropping the mapping up or down in the list.

[NOTE]
----
The mapping precedence is determined by the order in which the mappings are listed.
----
2. Click btn:[Next] to review and verify the mapping configurations.
3. Click btn:[Finish].

# Role mapping

Role mapping is the mapping of a user either to a global role, such as Platform Auditor, or team or organization role.

When a Team and/or Organization is specified together with the appropriate Role, the behavior is identical with Organization mapping or Team mapping.

Role mapping can be specified separately for each account authentication.

1. After configuring the authentication details for your authentication type, select Role from the Add authentication mapping list.
2. Enter a unique rule Name to identify the rule.
3. Select a Trigger from the list. See Authenticator map triggers for more information about map triggers.
4. Select Revoke to remove the role for the user when none of the trigger conditions are matched.
5. Select a Role to be applied or removed for matching users.
6. Click btn:[Next].

1. You can manage the authentication mappings order by dragging and dropping the mapping up or down in the list.

[NOTE]
----
The mapping precedence is determined by the order in which the mappings are listed.
----
2. Click btn:[Next] to review and verify the mapping configurations.
3. Click btn:[Finish].

# Superuser mapping

Superuser mapping is the mapping of a user to the superuser role, such as System Administrator.

1. After configuring the authentication details for your authentication type, select Superuser from the Add authentication mapping list.
2. Enter a unique rule Name to identify the rule.
3. Select a Trigger from the list. See Authenticator map triggers for more information about map triggers.
4. Select Revoke to remove the superuser role from the user when none of the trigger conditions are matched.
5. Click btn:[Next].

1. You can manage the authentication mappings order by dragging and dropping the mapping up or down in the list.

[NOTE]
----
The mapping precedence is determined by the order in which the mappings are listed.
----
2. Click btn:[Next] to review and verify the mapping configurations.
3. Click btn:[Finish].
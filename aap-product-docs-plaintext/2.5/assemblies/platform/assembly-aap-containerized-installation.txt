# Ansible Automation Platform containerized installation

Ansible Automation Platform is a commercial offering that helps teams manage complex multi-tier deployments by adding control, knowledge, and delegation to Ansible-powered environments.
This guide helps you to understand the installation requirements and processes behind the containerized version of Ansible Automation Platform.

[NOTE]
----
Upgrades from 2.4 Containerized Ansible Automation Platform Tech Preview to 2.5 Containerized Ansible Automation Platform are not supported at this time.
----
* A host running Red Hat Enterprise Linux (RHEL) 9.2 or later. Use a minimal operating system base install.
* A non-root user for the Red Hat Enterprise Linux host, with sudo or other Ansible supported privilege escalation (sudo recommended). This user is responsible for the installation of containerized Ansible Automation Platform.
* SSH public key authentication for the non-root user. For guidelines on setting up SSH public key authentication for the non-root user, see How to configure SSH public key authentication for passwordless login.
* SSH keys are only required when installing on remote hosts. If doing a self contained local VM based installation, you can use ansible_connection=local.
* Internet access from the Red Hat Enterprise Linux host if you are using the default online installation method.
* The appropriate network ports are open if a firewall is in place. For more information about the ports to open, see Container topologies in Tested deployment models.

# Tested deployment topologies

Red Hat tests Ansible Automation Platform 2.5 with a defined set of topologies to give you opinionated deployment options. The supported topologies include infrastructure topology diagrams, tested system configurations, example inventory files, and network ports information.

For containerized Ansible Automation Platform, there are two infrastructure topology shapes:

1. Growth - (All-in-one) Intended for organizations that are getting started with Ansible Automation Platform. This topology allows for smaller footprint deployments.
2. Enterprise - Intended for organizations that require Ansible Automation Platform deployments to have redundancy or higher compute for large volumes of automation. This is a more future-proofed scaled out architecture.

For more information about the tested deployment topologies for containerized Ansible Automation Platform, see Container topologies in Tested deployment models.

# System requirements

Each virtual machine (VM) has the following system requirements:



If performing a bundled installation of the growth topology with hub_seed_collections=true, then 32 GB RAM is recommended. Note that with this configuration the install time is going to increase and can take 45 or more minutes alone to complete seeding the collections.

# Preparing the Red Hat Enterprise Linux host for containerized installation

Containerized Ansible Automation Platform runs the component services as Podman based containers on top of a Red Hat Enterprise Linux host. Prepare the Red Hat Enterprise Linux host to ensure a successful installation.

1. Log in to the Red Hat Enterprise Linux host as your non-root user.
2. Set a hostname that is a fully qualified domain name (FQDN):

```
sudo hostnamectl set-hostname <your_hostname>
```

3. Register your Red Hat Enterprise Linux host with subscription-manager:

```
sudo subscription-manager register
```

4. Run sudo dnf repolist to validate that only the BaseOS and AppStream repositories are set up and enabled on the host:

```
$ sudo dnf repolist
Updating Subscription Management repositories.
repo id                                                    repo name
rhel-9-for-x86_64-appstream-rpms                           Red Hat Enterprise Linux 9 for x86_64 - AppStream (RPMs)
rhel-9-for-x86_64-baseos-rpms                              Red Hat Enterprise Linux 9 for x86_64 - BaseOS (RPMs)
```

5. Ensure that only these repositories are available to the Red Hat Enterprise Linux host. For more information about managing custom repositories, see Managing custom software repositories.
6. Ensure that the host has DNS configured and can resolve host names and IP addresses by using a fully qualified domain name (FQDN). This is essential to ensure services can talk to one another.
7. Install ansible-core:

```
sudo dnf install -y ansible-core
```

8. Optional: You can install additional utilities that can be useful for troubleshooting purposes, for example wget, git-core, rsync, and vim:

```
sudo dnf install -y wget git-core rsync vim
```

9. Optional: To have the installation program automatically pick up and apply your Ansible Automation Platform subscription manifest license, follow the steps in Obtaining a manifest file.

* For more information about registering your RHEL system, see Getting Started with RHEL System Registration.
* For information about configuring unbound DNS, see Setting up an unbound DNS server.
* For information about configuring DNS using BIND, see Setting up and configuring a BIND DNS server.
* For more information about ansible-core, see Ansible Core Documentation.

# Downloading Ansible Automation Platform

Choose the installation program you need based on your Red Hat Enterprise Linux environment internet connectivity and download the installation program to your Red Hat Enterprise Linux host.

1. Download the latest installer .tar file from the Ansible Automation Platform download page.
1. For online installations: Ansible Automation Platform 2.5 Containerized Setup
2. For offline or bundled installations: Ansible Automation Platform 2.5 Containerized Setup Bundle
2. Copy the installation program .tar file and the optional manifest .zip file onto your Red Hat Enterprise Linux host.
3. Decide where you want the installation program to reside on the file system. Installation related files are created under this location and require at least 10 GB for the initial installation.
4. Unpack the installation program .tar file into your installation directory, and go to the unpacked directory.
1. To unpack the online installer:

```
$ tar xfvz ansible-automation-platform-containerized-setup-<version>.tar.gz
```

2. To unpack the offline or bundled installer:

```
$ tar xfvz ansible-automation-platform-containerized-setup-bundle-<version>-<arch_name>.tar.gz
```


# Configuring the inventory file

You can control the installation of Ansible Automation Platform with inventory files. Inventory files define the hosts and containers used and created, variables for components, and other information needed to customize the installation.

Example inventory files are provided in this document that you can copy and change to quickly get started.

Inventory files for the growth and enterprise topologies are also found in the downloaded installer package:

* The default one named inventory is for the enterprise topology pattern.
* If you want to deploy the growth or all-in-one pattern you need to copy over or use the inventory-growth file instead.

Additionally, you can find example inventory files in Container topologies in Tested deployment models.

To use the example inventory files, replace the < > placeholders with your specific variables, and update the host names. Refer to the README.md file in the installation directory for more information about optional and required variables.

## Inventory file for online installation for containerized growth topology (all-in-one)

Use the example inventory file to perform an online installation for the containerized growth topology (all-in-one):


```yaml
# This is the Ansible Automation Platform installer inventory file intended for the container growth deployment topology.
# This inventory file expects to be run from the host where Ansible Automation Platform will be installed.
# Consult the Ansible Automation Platform product documentation about this topology's tested hardware configuration.
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/tested_deployment_models/container-topologies
#
# Consult the docs if you are unsure what to add
# For all optional variables consult the included README.md
# or the Ansible Automation Platform documentation:
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation

# This section is for your platform gateway hosts
# -----------------------------------------------------
[automationgateway]
aap.example.org

# This section is for your automation controller hosts
# -------------------------------------------------
[automationcontroller]
aap.example.org

# This section is for your automation hub hosts
# -----------------------------------------------------
[automationhub]
aap.example.org

# This section is for your Event-Driven Ansible controller hosts
# -----------------------------------------------------
[automationeda]
aap.example.org

# This section is for the Ansible Automation Platform database
# --------------------------------------
[database]
aap.example.org

[all:vars]
# Ansible
ansible_connection=local

# Common variables
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation/appendix-inventory-files-vars#ref-general-inventory-variables
# -----------------------------------------------------
postgresql_admin_username=postgres
postgresql_admin_password=<set your own>

registry_username=<your RHN username>
registry_password=<your RHN password>

redis_mode=standalone

# Platform gateway
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation/appendix-inventory-files-vars#ref-gateway-variables
# -----------------------------------------------------
gateway_admin_password=<set your own>
gateway_pg_host=aap.example.org
gateway_pg_password=<set your own>

# Automation controller
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation/appendix-inventory-files-vars#ref-controller-variables
# -----------------------------------------------------
controller_admin_password=<set your own>
controller_pg_host=aap.example.org
controller_pg_password=<set your own>

# Automation hub
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation/appendix-inventory-files-vars#ref-hub-variables
# -----------------------------------------------------
hub_admin_password=<set your own>
hub_pg_host=aap.example.org
hub_pg_password=<set your own>
hub_seed_collections=false

# Event-Driven Ansible controller
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation/appendix-inventory-files-vars#event-driven-ansible-controller
# -----------------------------------------------------
eda_admin_password=<set your own>
eda_pg_host=aap.example.org
eda_pg_password=<set your own>
```


## Inventory file for online installation for containerized enterprise topology

Use the example inventory file to perform an online installation for the containerized enterprise topology:


```yaml
# This is the Ansible Automation Platform enterprise installer inventory file
# Consult the docs if you are unsure what to add
# For all optional variables consult the included README.md
# or the Red Hat documentation:
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation

# This section is for your platform gateway hosts
# -----------------------------------------------------
[automationgateway]
gateway1.example.org
gateway2.example.org

# This section is for your automation controller hosts
# -----------------------------------------------------
[automationcontroller]
controller1.example.org
controller2.example.org

# This section is for your Ansible Automation Platform execution hosts
# -----------------------------------------------------
[execution_nodes]
hop1.example.org receptor_type='hop'
exec1.example.org
exec2.example.org

# This section is for your automation hub hosts
# -----------------------------------------------------
[automationhub]
hub1.example.org
hub2.example.org

# This section is for your Event-Driven Ansible controller hosts
# -----------------------------------------------------
[automationeda]
eda1.example.org
eda2.example.org

[redis]
gateway1.example.org
gateway2.example.org
hub1.example.org
hub2.example.org
eda1.example.org
eda2.example.org

[all:vars]

# Common variables
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation/appendix-inventory-files-vars#ref-general-inventory-variables
# -----------------------------------------------------
postgresql_admin_username=<set your own>
postgresql_admin_password=<set your own>
registry_username=<your RHN username>
registry_password=<your RHN password>

# Platform gateway
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation/appendix-inventory-files-vars#ref-gateway-variables
# -----------------------------------------------------
gateway_admin_password=<set your own>
gateway_pg_host=externaldb.example.org
gateway_pg_database=<set your own>
gateway_pg_username=<set your own>
gateway_pg_password=<set your own>

# Automation controller
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation/appendix-inventory-files-vars#ref-controller-variables
# -----------------------------------------------------
controller_admin_password=<set your own>
controller_pg_host=externaldb.example.org
controller_pg_database=<set your own>
controller_pg_username=<set your own>
controller_pg_password=<set your own>

# Automation hub
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation/appendix-inventory-files-vars#ref-hub-variables
# -----------------------------------------------------
hub_admin_password=<set your own>
hub_pg_host=externaldb.example.org
hub_pg_database=<set your own>
hub_pg_username=<set your own>
hub_pg_password=<set your own>

# Event-Driven Ansible controller
# {BaseURL}/red_hat_ansible_automation_platform/2.5/html/containerized_installation/appendix-inventory-files-vars#event-driven-ansible-controller
# -----------------------------------------------------
eda_admin_password=<set your own>
eda_pg_host=externaldb.example.org
eda_pg_database=<set your own>
eda_pg_username=<set your own>
eda_pg_password=<set your own>
```


* 6 VMs are required for a Redis high availability (HA) compatible deployment. When installing Ansible Automation Platform with the containerized installer, Redis can be colocated on any Ansible Automation Platform component VMs of your choice except for execution nodes or the PostgreSQL database. They might also be assigned VMs specifically for Redis use.
* By default the redis_mode is set to cluster.
* redis_mode=cluster
* For more information about Redis, see Caching and queueing system in Planning your installation.

## Additional information for configuring your inventory file

* To perform an offline installation, add the following under the [all:vars] group:


```
bundle_install=true
# The bundle directory must include /bundle in the path
bundle_dir=<full path to the bundle directory>
```


* To configure a HAProxy load balancer in front of platform gateway with a custom CA cert, set the following inventory file variables under the [all:vars] group:


```
custom_ca_cert=<path_to_cert_crt>
gateway_main_url=<https://load_balancer_url>
```



[NOTE]
----
HAProxy SSL passthrough mode is not supported with platform gateway.
----

Shared storage is required when installing more than one instance of automation hub with a file storage backend. When installing a single instance of the automation hub, shared storage is optional.

* To configure shared storage for automation hub, set the following variable in the inventory file, ensuring your network file system (NFS) share has read, write, and execute permissions:


```
hub_shared_data_path=<path_to_nfs_share>
```


* To change the mount options for your NFS share, use the hub_shared_data_mount_opts variable. This variable is optional and the default value is rw,sync,hard.

* To define the location of your automation controller license file, set the following variable in the inventory file:


```
controller_license_file=<full_path_to_your_manifest_zip_file>
```


## Setting up an external (customer supported) database


[IMPORTANT]
----
When using an external database with Ansible Automation Platform, you must create and maintain that database. Ensure that you clear your external database when uninstalling Ansible Automation Platform.
----

Use the following procedure to configure an external PostgreSQL compliant database for use with an Ansible Automation Platform component, for example automation controller, Event-Driven Ansible, automation hub, and platform gateway.

## Setting registry_username and registry_password

When using the registry_username and registry_password variables for an online non-bundled installation, you need to create a new registry service account.

Registry service accounts are named tokens that can be used in environments where credentials will be shared, such as deployment systems.

1. Go to https://access.redhat.com/terms-based-registry/accounts.
2. On the Registry Service Accounts page click btn:[New Service Account].
3. Enter a name for the account using only the allowed characters.
4. Optionally enter a description for the account.
5. Click btn:[Create].
6. Find the created account in the list by searching for your name in the search field.
7. Click the name of the account that you created.
8. Alternatively, if you know the name of your token, you can go directly to the page by entering the URL:

```
https://access.redhat.com/terms-based-registry/token/<name-of-your-token>
```

9. A token page opens, displaying a generated username (different from the account name) and a token.

If no token is displayed, click btn:[Regenerate Token]. You can also click this to generate a new username and token.
10. Copy the username (for example "1234567|testuser") and use it to set the variable registry_username.
11. Copy the token and use it to set the variable registry_password.

## Using custom TLS certificates

By default, the installation program generates TLS certificates and keys for all services that are signed by a custom Certificate Authority (CA). You can provide a custom TLS certificate and key for each service. If that certificate is signed by a custom CA, you must provide the CA TLS certificate and key.

* Certificate Authority


```
ca_tls_cert=/full/path/to/tls/certificate
ca_tls_key=/full/path/to/tls/key
```


* Platform gateway


```
gateway_tls_cert=/full/path/to/tls/certificate
gateway_tls_key=/full/path/to/tls/key
```


* Automation controller


```
controller_tls_cert=/full/path/to/tls/certificate
controller_tls_key=/full/path/to/tls/key
```


* Automation hub


```
hub_tls_cert=/full/path/to/tls/certificate
hub_tls_key=/full/path/to/tls/key
```


* Event-Driven Ansible


```
eda_tls_cert=/full/path/to/tls/certificate
eda_tls_key=/full/path/to/tls/key
```


* PostgreSQL


```
postgresql_tls_cert=/full/path/to/tls/certificate
postgresql_tls_key=/full/path/to/tls/key
```


* Receptor


```
receptor_tls_cert=/full/path/to/tls/certificate
receptor_tls_key=/full/path/to/tls/key
```


## Using custom Receptor signing keys

Receptor signing is enabled by default unless receptor_disable_signing=true is set, and an RSA key pair (public and private) is generated by the installation program. However, you can set custom RSA public and private keys by using the following variables:


```
receptor_signing_private_key=<full_path_to_private_key>
receptor_signing_public_key=<full_path_to_public_key>
```


## Enabling automation content collection and container signing

Automation content signing is disabled by default. To enable it, the following installation variables are required in the inventory file:


```
#Collection signing
hub_collection_signing=true
hub_collection_signing_key=<full_path_to_collection_gpg_key>

#Container signing
hub_container_signing=true
hub_container_signing_key=<full_path_to_container_gpg_key>
```


The following variables are required if the keys are protected by a passphrase:


```
#Collection signing
hub_collection_signing_pass=<gpg_key_passphrase>

#Container signing
hub_container_signing_pass=<gpg_key_passphrase>
```


The hub_collection_signing_key and hub_container_signing_key variables require the set up of keys before running an installation.

Automation content signing currently only supports GnuPG (GPG) based signature keys. For more information about GPG, see the GnuPG man page.


[NOTE]
----
The algorithm and cipher used is the responsibility of the customer.
----

1. On a RHEL9 server run the following command to create a new key pair for collection signing:

```
gpg --gen-key
```

2. Enter your information for "Real name" and "Email address":

Example output:

```
gpg --gen-key
gpg (GnuPG) 2.3.3; Copyright (C) 2021 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Note: Use "gpg --full-generate-key" for a full featured key generation dialog.

GnuPG needs to construct a user ID to identify your key.

Real name: Joe Bloggs
Email address: jbloggs@example.com
You selected this USER-ID:
    "Joe Bloggs <jbloggs@example.com>"

Change (N)ame, (E)mail, or (O)kay/(Q)uit? O
```


If this fails, your environment does not have the necessary prerequisite packages installed for GPG. Install the necessary packages to proceed.
3. A dialog box will appear and ask you for a passphrase. This is optional but recommended.
4. The keys are then generated, and produce output similar to the following:

```
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: key 022E4FBFB650F1C4 marked as ultimately trusted
gpg: revocation certificate stored as '/home/aapuser/.gnupg/openpgp-revocs.d/F001B037976969DD3E17A829022E4FBFB650F1C4.rev'
public and secret key created and signed.

pub   rsa3072 2024-10-25 [SC] [expires: 2026-10-25]
      F001B037976969DD3E17A829022E4FBFB650F1C4
uid                      Joe Bloggs <jbloggs@example.com>
sub   rsa3072 2024-10-25 [E] [expires: 2026-10-25]
```


Note the expiry date that you can set based on company standards and needs.
5. You can view all of your GPG keys by running the following command:

```
gpg --list-secret-keys --keyid-format=long
```

6. To export the public key run the following command:

```
gpg --export -a --output collection-signing-key.pub <email_address_used_to_generate_key>
```

7. To export the private key run the following command:

```
gpg -a --export-secret-keys <email_address_used_to_generate_key> > collection-signing-key.priv
```

8. If a passphrase is detected, you will be prompted to enter the passphrase.
9. To view the private key file contents, run the following command:

```
cat collection-signing-key.priv
```


Example output:

```
-----BEGIN PGP PRIVATE KEY BLOCK-----

lQWFBGcbN14BDADTg5BsZGbSGMHypUJMuzmIffzzz4LULrZA8L/I616lzpBHJvEs
sSN6KuKY1TcIwIDCCa/U5Obm46kurpP2Y+vNA1YSEtMJoSeHeamWMDd99f49ItBp

<snippet>

j920hRy/3wJGRDBMFa4mlQg=
=uYEF
-----END PGP PRIVATE KEY BLOCK-----
```

10. Repeat steps 1 to 9 to create a key pair for container signing.
11. Add the following variables to the inventory file and run the installation to create the signing services:

```
#Collection signing
hub_collection_signing=true
hub_collection_signing_key=/home/aapuser/aap/ansible-automation-platform-containerized-setup-2.5-2/collection-signing-key.priv
# This variable is required if the key is protected by a passphrase
hub_collection_signing_pass=<password>

#Container signing
hub_container_signing=true
hub_container_signing_key=/home/aapuser/aap/ansible-automation-platform-containerized-setup-2.5-2/container-signing-key.priv
# This variable is required if the key is protected by a passphrase
hub_container_signing_pass=<password>
```


## Adding execution nodes

The containerized installer can deploy remote execution nodes. The execution_nodes group in the inventory file handles this.


```
[execution_nodes]
<fqdn_of_your_execution_host>
```


An execution node is by default configured as an execution type running on port 27199 (TCP).
This can be changed by the following variables:


```
receptor_port=27199
receptor_protocol=tcp
receptor_type=hop
```


The receptor_type value can be either execution or hop, while the receptor_protocol is either tcp or udp. By default, the nodes in the execution_nodes group are added as peers for the controller node. However, you can change the peers configuration by using the receptor_peers variable.


```
[execution_nodes]
fqdn_of_your_execution_host
fqdn_of_your_hop_host receptor_type=hop receptor_peers='["<fqdn_of_your_execution_host>"]'
```


## Adding a safe plugin variable to Event-Driven Ansible controller

When using redhat.insights_eda or similar plugins to run rulebook activations in Event-Driven Ansible controller, you must add a safe plugin variable to a directory in Ansible Automation Platform. This ensures connection between Event-Driven Ansible controller and the source plugin, and displays port mappings correctly.

# Installing containerized Ansible Automation Platform

Use the following command to install containerized Ansible Automation Platform:


```
ansible-playbook -i <inventory_file_name> ansible.containerized_installer.install
```


For example:


```
ansible-playbook -i inventory ansible.containerized_installer.install
```


* If your privilege escalation requires you to enter a password, append -K to the command. You are then prompted for the BECOME password.
* You can use increasing verbosity, up to 4 v's (-vvvv) to see the details of the installation process. However, it is important to note that this can significantly increase installation time, so it is recommended that you use it only as needed or requested by Red Hat support.

# Accessing Ansible Automation Platform

After the installation completes, the default protocol and ports used for Ansible Automation Platform are 80 (HTTP) and 443 (HTTPS).

You can customize the ports with the following variables:


```
envoy_http_port=80
envoy_https_port=443
```


If you want to disable HTTPS, set envoy_disable_https to true:


```
envoy_disable_https=true
```


The platform UI is available by default at:


```
https://<gateway-node>:443
```


Log in as the admin user with the password you created for gateway_admin_password.

# Updating container-based Ansible Automation Platform

Perform a patch update for a container-based installation of Ansible Automation Platform from 2.5 to 2.5.x.

Upgrades from 2.4 Containerized Ansible Automation Platform Tech Preview to 2.5 Containerized Ansible Automation Platform are not supported at this time.

You have done the following:

* Reviewed the release notes for the associated patch release. For more information, see the Ansible Automation Platform Release notes.
* Created a backup of your Ansible Automation Platform deployment. For more information, see Backing up container-based Ansible Automation Platform.

1. Download the latest version of the containerized installer from the Ansible Automation Platform download.
1. For online installations Ansible Automation Platform 2.5 Containerized Setup
2. For offline or bundled installations: Ansible Automation Platform 2.5 Containerized Setup Bundle
2. Copy the installation program .tar file onto your Red Hat Enterprise Linux host.
3. Decide where you want the installation program to reside on the filesystem. Installation related files will be created under this location and require at least 10 GB for the initial installation.
4. Unpack the installation program .tar file into your installation directory, and go to the unpacked directory.
1. To unpack the online installer:

```
$ tar xfvz ansible-automation-platform-containerized-setup-<version>.tar.gz
```

2. To unpack the offline or bundled installer:

```
$ tar xfvz ansible-automation-platform-containerized-setup-bundle-<version>-<arch name>.tar.gz
```

5. Edit the inventory file to match your required configuration. You can keep the same parameters from your existing Ansible Automation Platform deployment or you can change the parameters to match any modifications to your environment.
6. Run the install playbook:

```
$ ansible-playbook -i inventory ansible.containerized_installer.install
```

* If your privilege escalation requires a password to be entered, append -K to the command. You will then be prompted for the BECOME password.
* You can use increasing verbosity, up to 4 v’s (-vvvv) to see the details of the installation process. However it is important to note that this can significantly increase installation time, so it is recommended that you use it only as needed or requested by Red Hat support.

The update begins.

# Backing up container-based Ansible Automation Platform

Perform a backup of your container-based installation of Ansible Automation Platform.

1. Go to the Red Hat Ansible Automation Platform installation directory on your Red Hat Enterprise Linux host.
2. Run the backup playbook:

```
$ ansible-playbook -i inventory ansible.containerized_installer.backup
```


This will backup the important data deployed by the containerized installer such as:
* PostgreSQL databases
* Configuration files
* Data files

By default, the backup directory is set to ~/backups. You can change this by using the backup_dir variable in your inventory file.

# Uninstalling containerized Ansible Automation Platform

When performing a reinstall following an uninstall that preserves the databases, you must use the previously generated Ansible Automation Platform secret key values to access the preserved databases.

Before performing an uninstall, collect the existing secret keys by running the following command:


```
$ podman secret inspect --showsecret <secret_key_variable> | jq -r .[].SecretData
```


For example:


```
$ podman secret inspect --showsecret controller_secret_key | jq -r .[].SecretData
```


For more information about the *_secret_key variables, see Inventory file variables.

To uninstall a containerized deployment, run the uninstall playbook:


```
$ ansible-playbook -i inventory ansible.containerized_installer.uninstall
```


This stops all systemd units and containers and then deletes all resources used by the containerized installer such as:

* configuration and data directories and files
* systemd unit files
* Podman containers and images
* RPM packages

To keep container images, set the container_keep_images parameter to true.


```
$ ansible-playbook -i inventory ansible.containerized_installer.uninstall -e container_keep_images=true
```


To keep PostgreSQL databases, set the postgresql_keep_databases parameter to true.


```
$ ansible-playbook -i inventory ansible.containerized_installer.uninstall -e postgresql_keep_databases=true
```


# Reinstalling containerized Ansible Automation Platform

To reinstall a containerized deployment after uninstalling and preserving the database, run the install playbook and include the existing secret key value:


```
$ ansible-playbook -i inventory ansible.containerized_installer.install -e controller_secret_key=<secret_key_value>
```


For more information about the *_secret_key variables, see Inventory file variables.